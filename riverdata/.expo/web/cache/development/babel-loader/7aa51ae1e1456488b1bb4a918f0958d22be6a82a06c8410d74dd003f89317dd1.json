{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { Component, useEffect, useState } from 'react';\nimport Button from \"react-native-web/dist/exports/Button\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport { NavigationActions } from \"react-navigation\";\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport Item from \"./Item\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar RDStateSitesScreen = function RDStateSitesScreen(_ref) {\n  var route = _ref.route,\n    navigation = _ref.navigation;\n  var _useState = useState({\n      value: {\n        timeSeries: []\n      }\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    data = _useState2[0],\n    setData = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    isLoading = _useState4[0],\n    setIsLoading = _useState4[1];\n  var _useState5 = useState(''),\n    _useState6 = _slicedToArray(_useState5, 2),\n    err = _useState6[0],\n    setErr = _useState6[1];\n  var _useState7 = useState([]),\n    _useState8 = _slicedToArray(_useState7, 2),\n    sites = _useState8[0],\n    setSites = _useState8[1];\n  var handleClick = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      setIsLoading(true);\n      try {\n        var response = yield fetch('https://waterservices.usgs.gov/nwis/iv?format=json&stateCd=nj', {\n          method: 'GET',\n          headers: {\n            Accept: 'application/json'\n          }\n        });\n        if (!response.ok) {\n          throw new Error('Error! status: ' + response.status);\n        }\n        var result = yield response.json();\n        console.log('result is: ', JSON.stringify(result, null, 4));\n        console.log(\"check1\");\n        setData(result);\n        console.log(\"check2\");\n      } catch (err) {\n        setErr(err.message);\n      } finally {\n        setIsLoading(false);\n        console.log(\"check3\");\n      }\n    });\n    return function handleClick() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var processData = function processData() {\n    var arr = [];\n    data.value.timeSeries.map(function (site) {\n      if (arr.some(function (val) {\n        return val[\"siteName\"] == site.sourceInfo.siteName;\n      })) {\n        arr.forEach(function (k) {\n          if (k[\"siteName\"] === site.sourceInfo.siteName) {\n            k[\"gauges\"]++;\n          }\n        });\n      } else {\n        var a = {};\n        a[\"siteName\"] = site.sourceInfo.siteName;\n        a[\"siteValue\"] = site.sourceInfo.siteCode[0].value;\n        a[\"gauges\"] = 1;\n        arr.push(a);\n      }\n      setSites(arr);\n    });\n  };\n  console.log(\"check4\");\n  useEffect(function () {\n    handleClick();\n  }, []);\n  useEffect(function () {\n    processData();\n    console.log(\"sites are: \", sites);\n  }, [data]);\n  console.log(\"check5\");\n  console.log(data);\n  console.log(\"check6\");\n  return _jsxs(View, {\n    style: {\n      flex: 1\n    },\n    children: [err && _jsx(Text, {\n      children: err\n    }), isLoading && _jsx(Text, {\n      children: \"Loading...\"\n    }), _jsx(ScrollView, {\n      style: {\n        flex: 1\n      },\n      children: sites.map(function (site) {\n        return _jsx(Item, {\n          label: site.siteName,\n          description: site.gauges + \" gauges\",\n          onPress: function onPress() {\n            navigation.navigate('Site Gauges', {\n              gaugeId: site.siteValue\n            });\n          }\n        }, site.siteName);\n      })\n    }), _jsx(StatusBar, {\n      barStyle: \"light-content\"\n    })]\n  });\n};\nexport default RDStateSitesScreen;","map":{"version":3,"names":["React","Component","useEffect","useState","NavigationActions","NavigationContainer","createNativeStackNavigator","Item","RDStateSitesScreen","route","navigation","value","timeSeries","data","setData","isLoading","setIsLoading","err","setErr","sites","setSites","handleClick","response","fetch","method","headers","Accept","ok","Error","status","result","json","console","log","JSON","stringify","message","processData","arr","map","site","some","val","sourceInfo","siteName","forEach","k","a","siteCode","push","flex","gauges","navigate","gaugeId","siteValue"],"sources":["C:/Users/subte/RDspring23/riverdata/riverdata/components/RDStateSites.js"],"sourcesContent":["// RDStateSites.js\r\nimport React, { Component, useEffect, useState } from 'react';\r\nimport { Button, View, Text, ScrollView, StatusBar } from 'react-native';\r\nimport { NavigationActions } from \"react-navigation\";\r\nimport { NavigationContainer } from '@react-navigation/native';\r\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\r\nimport Item from './Item';\r\n\r\nconst RDStateSitesScreen = ({ route, navigation }) => {\r\n  const [data, setData] = useState({value: {timeSeries: []}});\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [err, setErr] = useState('');\r\n  const [sites, setSites] = useState([]);\r\n\r\n  const handleClick = async () => {\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      const response = await fetch('https://waterservices.usgs.gov/nwis/iv?format=json&stateCd=nj', {\r\n        method: 'GET',\r\n        headers: {\r\n          Accept: 'application/json',\r\n        },\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Error! status: ' + response.status);\r\n      }\r\n\r\n      const result = await response.json();\r\n\r\n      console.log('result is: ', JSON.stringify(result, null, 4));\r\n      console.log(\"check1\")\r\n      setData(result);\r\n      console.log(\"check2\")\r\n    } catch (err) {\r\n      setErr(err.message);\r\n    } finally {\r\n      setIsLoading(false);\r\n      console.log(\"check3\")\r\n    }\r\n  }\r\n\r\n  const processData = () => {\r\n    let arr = [];\r\n      data.value.timeSeries.map(site=>{\r\n      if(arr.some((val)=>{ return val[\"siteName\"] == site.sourceInfo.siteName })){\r\n        arr.forEach((k)=>{\r\n          if(k[\"siteName\"] === site.sourceInfo.siteName){ \r\n            k[\"gauges\"]++\r\n          }\r\n        }) \r\n        }else{\r\n        let a = {};\r\n        a[\"siteName\"] = site.sourceInfo.siteName\r\n        a[\"siteValue\"] = site.sourceInfo.siteCode[0].value\r\n        a[\"gauges\"] = 1\r\n        arr.push(a); \r\n      }\r\n      setSites(arr);\r\n    });\r\n  }\r\n  console.log(\"check4\")\r\n  useEffect(()=> {\r\n    handleClick();\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    processData();\r\n    console.log(\"sites are: \", sites);\r\n  },[data])\r\n\r\n  console.log(\"check5\")\r\n  console.log(data);\r\n  console.log(\"check6\")\r\n  return (\r\n    <View style={{ flex: 1 }}>\r\n      {err && <Text>{err}</Text>}\r\n\r\n      {isLoading && <Text>Loading...</Text>}\r\n      <ScrollView style={{ flex: 1 }}>\r\n        {sites.map(site => {\r\n          return(\r\n            <Item key={site.siteName} label={site.siteName} description={site.gauges + \" gauges\"} onPress={ () => {\r\n              navigation.navigate('Site Gauges', { gaugeId: site.siteValue })\r\n            }} />\r\n          )\r\n        })}\r\n      </ScrollView>\r\n      <StatusBar barStyle=\"light-content\" />\r\n    </View>\r\n  )\r\n\r\n}\r\nexport default RDStateSitesScreen;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}