{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"active\", \"activityState\", \"style\", \"enabled\"];\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nexport * from \"./types\";\nexport { default as useTransitionProgress } from \"./useTransitionProgress\";\nexport { isSearchBarAvailableForCurrentPlatform, executeNativeBackPress } from \"./utils\";\nvar ENABLE_SCREENS = true;\nexport function enableScreens() {\n  var shouldEnableScreens = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n  ENABLE_SCREENS = shouldEnableScreens;\n}\nexport function screensEnabled() {\n  return ENABLE_SCREENS;\n}\n\nexport function enableFreeze() {\n  var shouldEnableReactFreeze = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n}\nexport var NativeScreen = function (_React$Component) {\n  _inherits(NativeScreen, _React$Component);\n  var _super = _createSuper(NativeScreen);\n  function NativeScreen() {\n    _classCallCheck(this, NativeScreen);\n    return _super.apply(this, arguments);\n  }\n  _createClass(NativeScreen, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n        active = _this$props.active,\n        activityState = _this$props.activityState,\n        style = _this$props.style,\n        _this$props$enabled = _this$props.enabled,\n        enabled = _this$props$enabled === void 0 ? ENABLE_SCREENS : _this$props$enabled,\n        rest = _objectWithoutProperties(_this$props, _excluded);\n      if (enabled) {\n        if (active !== undefined && activityState === undefined) {\n          activityState = active !== 0 ? 2 : 0;\n        }\n\n        return React.createElement(View, _extends({\n          hidden: activityState === 0,\n          style: [style, {\n            display: activityState !== 0 ? 'flex' : 'none'\n          }]\n        }, rest));\n      }\n      return React.createElement(View, rest);\n    }\n  }]);\n  return NativeScreen;\n}(React.Component);\nexport var Screen = Animated.createAnimatedComponent(NativeScreen);\nexport var ScreenContext = React.createContext(Screen);\nexport var ScreenContainer = View;\nexport var NativeScreenContainer = View;\nexport var NativeScreenNavigationContainer = View;\nexport var ScreenStack = View;\nexport var FullWindowOverlay = View;\nexport var ScreenStackHeaderBackButtonImage = function ScreenStackHeaderBackButtonImage(props) {\n  return React.createElement(View, null, React.createElement(Image, _extends({\n    resizeMode: \"center\",\n    fadeDuration: 0\n  }, props)));\n};\nexport var ScreenStackHeaderRightView = function ScreenStackHeaderRightView(props) {\n  return React.createElement(View, props);\n};\nexport var ScreenStackHeaderLeftView = function ScreenStackHeaderLeftView(props) {\n  return React.createElement(View, props);\n};\nexport var ScreenStackHeaderCenterView = function ScreenStackHeaderCenterView(props) {\n  return React.createElement(View, props);\n};\nexport var ScreenStackHeaderSearchBarView = function ScreenStackHeaderSearchBarView(props) {\n  return React.createElement(View, props);\n};\nexport var ScreenStackHeaderConfig = View;\n\nexport var SearchBar = View;\nexport var ScreenStackHeaderSubview = View;\nexport var shouldUseActivityState = true;","map":{"version":3,"mappings":"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","names":["React","default","useTransitionProgress","isSearchBarAvailableForCurrentPlatform","executeNativeBackPress","ENABLE_SCREENS","enableScreens","shouldEnableScreens","screensEnabled","enableFreeze","shouldEnableReactFreeze","NativeScreen","render","props","active","activityState","style","enabled","rest","undefined","View","hidden","display","Component","Screen","Animated","createAnimatedComponent","ScreenContext","createContext","ScreenContainer","NativeScreenContainer","NativeScreenNavigationContainer","ScreenStack","FullWindowOverlay","ScreenStackHeaderBackButtonImage","Image","resizeMode","fadeDuration","ScreenStackHeaderRightView","ScreenStackHeaderLeftView","ScreenStackHeaderCenterView","ScreenStackHeaderSearchBarView","ScreenStackHeaderConfig","SearchBar","ScreenStackHeaderSubview","shouldUseActivityState"],"sources":["index.tsx"],"sourcesContent":["import React from 'react';\nimport { Animated, View, ViewProps, ImageProps, Image } from 'react-native';\nimport {\n  ScreenProps,\n  ScreenContainerProps,\n  ScreenStackProps,\n  ScreenStackHeaderConfigProps,\n  HeaderSubviewTypes,\n  SearchBarProps,\n} from './types';\n\nexport * from './types';\nexport { default as useTransitionProgress } from './useTransitionProgress';\nexport {\n  isSearchBarAvailableForCurrentPlatform,\n  executeNativeBackPress,\n} from './utils';\n\nlet ENABLE_SCREENS = true;\n\nexport function enableScreens(shouldEnableScreens = true): void {\n  ENABLE_SCREENS = shouldEnableScreens;\n}\n\nexport function screensEnabled(): boolean {\n  return ENABLE_SCREENS;\n}\n\n// @ts-ignore function stub, freezing logic is located in index.native.tsx\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport function enableFreeze(shouldEnableReactFreeze = true): void {\n  // noop\n}\n\nexport class NativeScreen extends React.Component<ScreenProps> {\n  render(): JSX.Element {\n    let {\n      active,\n      activityState,\n      style,\n      enabled = ENABLE_SCREENS,\n      ...rest\n    } = this.props;\n\n    if (enabled) {\n      if (active !== undefined && activityState === undefined) {\n        activityState = active !== 0 ? 2 : 0; // change taken from index.native.tsx\n      }\n      return (\n        <View\n          // @ts-expect-error: hidden exists on web, but not in React Native\n          hidden={activityState === 0}\n          style={[style, { display: activityState !== 0 ? 'flex' : 'none' }]}\n          {...rest}\n        />\n      );\n    }\n\n    return <View {...rest} />;\n  }\n}\n\nexport const Screen = Animated.createAnimatedComponent(NativeScreen);\n\nexport const ScreenContext = React.createContext(Screen);\n\nexport const ScreenContainer: React.ComponentType<ScreenContainerProps> = View;\n\nexport const NativeScreenContainer: React.ComponentType<ScreenContainerProps> = View;\n\nexport const NativeScreenNavigationContainer: React.ComponentType<ScreenContainerProps> = View;\n\nexport const ScreenStack: React.ComponentType<ScreenStackProps> = View;\n\nexport const FullWindowOverlay = View;\n\nexport const ScreenStackHeaderBackButtonImage = (\n  props: ImageProps\n): JSX.Element => (\n  <View>\n    <Image resizeMode=\"center\" fadeDuration={0} {...props} />\n  </View>\n);\n\nexport const ScreenStackHeaderRightView = (\n  props: React.PropsWithChildren<ViewProps>\n): JSX.Element => <View {...props} />;\n\nexport const ScreenStackHeaderLeftView = (\n  props: React.PropsWithChildren<ViewProps>\n): JSX.Element => <View {...props} />;\n\nexport const ScreenStackHeaderCenterView = (\n  props: React.PropsWithChildren<ViewProps>\n): JSX.Element => <View {...props} />;\n\nexport const ScreenStackHeaderSearchBarView = (\n  props: React.PropsWithChildren<SearchBarProps>\n): JSX.Element => <View {...props} />;\n\nexport const ScreenStackHeaderConfig: React.ComponentType<ScreenStackHeaderConfigProps> = View;\n\n// @ts-expect-error: search bar props have no common props with View\nexport const SearchBar: React.ComponentType<SearchBarProps> = View;\n\nexport const ScreenStackHeaderSubview: React.ComponentType<React.PropsWithChildren<\n  ViewProps & { type?: HeaderSubviewTypes }\n>> = View;\n\nexport const shouldUseActivityState = true;\n"]},"metadata":{},"sourceType":"module"}