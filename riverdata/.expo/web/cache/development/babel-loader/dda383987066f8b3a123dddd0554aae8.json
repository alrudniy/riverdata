{"ast":null,"code":"import { Reanimated } from \"./reanimatedWrapper\";\nimport { State } from \"../../State\";\nimport { tagMessage } from \"../../utils\";\nvar warningMessage = tagMessage('react-native-reanimated is required in order to use synchronous state management');\n\nvar REANIMATED_AVAILABLE = (Reanimated === null || Reanimated === void 0 ? void 0 : Reanimated.useSharedValue) !== undefined;\nvar setGestureState = Reanimated === null || Reanimated === void 0 ? void 0 : Reanimated.setGestureState;\nexport var GestureStateManager = {\n  create: function create(handlerTag) {\n    'worklet';\n\n    return {\n      begin: function begin() {\n        'worklet';\n\n        if (REANIMATED_AVAILABLE) {\n          setGestureState(handlerTag, State.BEGAN);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n      activate: function activate() {\n        'worklet';\n\n        if (REANIMATED_AVAILABLE) {\n          setGestureState(handlerTag, State.ACTIVE);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n      fail: function fail() {\n        'worklet';\n\n        if (REANIMATED_AVAILABLE) {\n          setGestureState(handlerTag, State.FAILED);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n      end: function end() {\n        'worklet';\n\n        if (REANIMATED_AVAILABLE) {\n          setGestureState(handlerTag, State.END);\n        } else {\n          console.warn(warningMessage);\n        }\n      }\n    };\n  }\n};","map":{"version":3,"mappings":"AAAA,SAASA,UAAT;AACA,SAASC,KAAT;AACA,SAASC,UAAT;AASA,IAAMC,cAAc,GAAGD,UAAU,CAC/B,kFAD+B,CAAjC;;AAMA,IAAME,oBAAoB,GAAG,WAAU,SAAV,cAAU,WAAV,sBAAU,CAAEC,cAAZ,MAA+BC,SAA5D;AACA,IAAMC,eAAe,GAAGP,UAAH,aAAGA,UAAH,uBAAGA,UAAU,CAAEO,eAApC;AAEA,OAAO,IAAMC,mBAAmB,GAAG;EACjCC,MAAM,kBAACC,UAAD,EAA8C;IAClD;;IACA,OAAO;MACLC,KAAK,EAAE,iBAAM;QACX;;QACA,IAAIP,oBAAJ,EAA0B;UACxBG,eAAe,CAACG,UAAD,EAAaT,KAAK,CAACW,KAAnB,CAAf;QACD,CAFD,MAEO;UACLC,OAAO,CAACC,IAAR,CAAaX,cAAb;QACD;MACF,CARI;MAULY,QAAQ,EAAE,oBAAM;QACd;;QACA,IAAIX,oBAAJ,EAA0B;UACxBG,eAAe,CAACG,UAAD,EAAaT,KAAK,CAACe,MAAnB,CAAf;QACD,CAFD,MAEO;UACLH,OAAO,CAACC,IAAR,CAAaX,cAAb;QACD;MACF,CAjBI;MAmBLc,IAAI,EAAE,gBAAM;QACV;;QACA,IAAIb,oBAAJ,EAA0B;UACxBG,eAAe,CAACG,UAAD,EAAaT,KAAK,CAACiB,MAAnB,CAAf;QACD,CAFD,MAEO;UACLL,OAAO,CAACC,IAAR,CAAaX,cAAb;QACD;MACF,CA1BI;MA4BLgB,GAAG,EAAE,eAAM;QACT;;QACA,IAAIf,oBAAJ,EAA0B;UACxBG,eAAe,CAACG,UAAD,EAAaT,KAAK,CAACmB,GAAnB,CAAf;QACD,CAFD,MAEO;UACLP,OAAO,CAACC,IAAR,CAAaX,cAAb;QACD;MACF;IAnCI,CAAP;EAqCD;AAxCgC,CAA5B","names":["Reanimated","State","tagMessage","warningMessage","REANIMATED_AVAILABLE","useSharedValue","undefined","setGestureState","GestureStateManager","create","handlerTag","begin","BEGAN","console","warn","activate","ACTIVE","fail","FAILED","end","END"],"sources":["gestureStateManager.ts"],"sourcesContent":["import { Reanimated } from './reanimatedWrapper';\nimport { State } from '../../State';\nimport { tagMessage } from '../../utils';\n\nexport interface GestureStateManagerType {\n  begin: () => void;\n  activate: () => void;\n  fail: () => void;\n  end: () => void;\n}\n\nconst warningMessage = tagMessage(\n  'react-native-reanimated is required in order to use synchronous state management'\n);\n\n// check if reanimated module is available, but look for useSharedValue as conditional\n// require of reanimated can sometimes return content of `utils.ts` file (?)\nconst REANIMATED_AVAILABLE = Reanimated?.useSharedValue !== undefined;\nconst setGestureState = Reanimated?.setGestureState;\n\nexport const GestureStateManager = {\n  create(handlerTag: number): GestureStateManagerType {\n    'worklet';\n    return {\n      begin: () => {\n        'worklet';\n        if (REANIMATED_AVAILABLE) {\n          setGestureState(handlerTag, State.BEGAN);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n\n      activate: () => {\n        'worklet';\n        if (REANIMATED_AVAILABLE) {\n          setGestureState(handlerTag, State.ACTIVE);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n\n      fail: () => {\n        'worklet';\n        if (REANIMATED_AVAILABLE) {\n          setGestureState(handlerTag, State.FAILED);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n\n      end: () => {\n        'worklet';\n        if (REANIMATED_AVAILABLE) {\n          setGestureState(handlerTag, State.END);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n    };\n  },\n};\n"]},"metadata":{},"sourceType":"module"}