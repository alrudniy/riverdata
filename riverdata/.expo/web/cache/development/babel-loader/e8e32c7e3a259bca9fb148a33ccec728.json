{"ast":null,"code":"import DeviceEventEmitter from \"react-native-web/dist/exports/DeviceEventEmitter\";\nimport { State } from \"../../State\";\nimport { TouchEventType } from \"../../TouchEventType\";\nimport { findHandler, findOldGestureHandler } from \"../handlersRegistry\";\nimport { tagMessage } from \"../../utils\";\nvar gestureHandlerEventSubscription = null;\nvar gestureHandlerStateChangeEventSubscription = null;\nvar warningMessage = tagMessage('You have to use react-native-reanimated in order to control the state of the gesture.');\nvar dummyStateManager = {\n  begin: function begin() {\n    console.warn(warningMessage);\n  },\n  activate: function activate() {\n    console.warn(warningMessage);\n  },\n  end: function end() {\n    console.warn(warningMessage);\n  },\n  fail: function fail() {\n    console.warn(warningMessage);\n  }\n};\nvar lastUpdateEvent = [];\nfunction isStateChangeEvent(event) {\n  return event.oldState != null;\n}\nfunction isTouchEvent(event) {\n  return event.eventType != null;\n}\nexport function onGestureHandlerEvent(event) {\n  var _handler$handlers7, _handler$handlers7$on, _handler$handlers8, _handler$handlers8$on, _handler$handlers9, _handler$handlers9$on, _handler$handlers10, _handler$handlers10$o;\n  var handler = findHandler(event.handlerTag);\n  if (handler) {\n    if (isStateChangeEvent(event)) {\n      if (event.oldState === State.UNDETERMINED && event.state === State.BEGAN) {\n        var _handler$handlers$onB, _handler$handlers;\n        (_handler$handlers$onB = (_handler$handlers = handler.handlers).onBegin) === null || _handler$handlers$onB === void 0 ? void 0 : _handler$handlers$onB.call(_handler$handlers, event);\n      } else if ((event.oldState === State.BEGAN || event.oldState === State.UNDETERMINED) && event.state === State.ACTIVE) {\n        var _handler$handlers$onS, _handler$handlers2;\n        (_handler$handlers$onS = (_handler$handlers2 = handler.handlers).onStart) === null || _handler$handlers$onS === void 0 ? void 0 : _handler$handlers$onS.call(_handler$handlers2, event);\n        lastUpdateEvent[handler.handlers.handlerTag] = event;\n      } else if (event.oldState !== event.state && event.state === State.END) {\n        var _handler$handlers$onF, _handler$handlers4;\n        if (event.oldState === State.ACTIVE) {\n          var _handler$handlers$onE, _handler$handlers3;\n          (_handler$handlers$onE = (_handler$handlers3 = handler.handlers).onEnd) === null || _handler$handlers$onE === void 0 ? void 0 : _handler$handlers$onE.call(_handler$handlers3, event, true);\n        }\n        (_handler$handlers$onF = (_handler$handlers4 = handler.handlers).onFinalize) === null || _handler$handlers$onF === void 0 ? void 0 : _handler$handlers$onF.call(_handler$handlers4, event, true);\n        lastUpdateEvent[handler.handlers.handlerTag] = undefined;\n      } else if ((event.state === State.FAILED || event.state === State.CANCELLED) && event.oldState !== event.state) {\n        var _handler$handlers$onF2, _handler$handlers6;\n        if (event.oldState === State.ACTIVE) {\n          var _handler$handlers$onE2, _handler$handlers5;\n          (_handler$handlers$onE2 = (_handler$handlers5 = handler.handlers).onEnd) === null || _handler$handlers$onE2 === void 0 ? void 0 : _handler$handlers$onE2.call(_handler$handlers5, event, false);\n        }\n        (_handler$handlers$onF2 = (_handler$handlers6 = handler.handlers).onFinalize) === null || _handler$handlers$onF2 === void 0 ? void 0 : _handler$handlers$onF2.call(_handler$handlers6, event, false);\n        lastUpdateEvent[handler.handlers.handlerTag] = undefined;\n      }\n    } else if (isTouchEvent(event)) {\n      switch (event.eventType) {\n        case TouchEventType.TOUCHES_DOWN:\n          (_handler$handlers7 = handler.handlers) === null || _handler$handlers7 === void 0 ? void 0 : (_handler$handlers7$on = _handler$handlers7.onTouchesDown) === null || _handler$handlers7$on === void 0 ? void 0 : _handler$handlers7$on.call(_handler$handlers7, event, dummyStateManager);\n          break;\n        case TouchEventType.TOUCHES_MOVE:\n          (_handler$handlers8 = handler.handlers) === null || _handler$handlers8 === void 0 ? void 0 : (_handler$handlers8$on = _handler$handlers8.onTouchesMove) === null || _handler$handlers8$on === void 0 ? void 0 : _handler$handlers8$on.call(_handler$handlers8, event, dummyStateManager);\n          break;\n        case TouchEventType.TOUCHES_UP:\n          (_handler$handlers9 = handler.handlers) === null || _handler$handlers9 === void 0 ? void 0 : (_handler$handlers9$on = _handler$handlers9.onTouchesUp) === null || _handler$handlers9$on === void 0 ? void 0 : _handler$handlers9$on.call(_handler$handlers9, event, dummyStateManager);\n          break;\n        case TouchEventType.TOUCHES_CANCELLED:\n          (_handler$handlers10 = handler.handlers) === null || _handler$handlers10 === void 0 ? void 0 : (_handler$handlers10$o = _handler$handlers10.onTouchesCancelled) === null || _handler$handlers10$o === void 0 ? void 0 : _handler$handlers10$o.call(_handler$handlers10, event, dummyStateManager);\n          break;\n      }\n    } else {\n      var _handler$handlers$onU, _handler$handlers11;\n      (_handler$handlers$onU = (_handler$handlers11 = handler.handlers).onUpdate) === null || _handler$handlers$onU === void 0 ? void 0 : _handler$handlers$onU.call(_handler$handlers11, event);\n      if (handler.handlers.onChange && handler.handlers.changeEventCalculator) {\n        var _handler$handlers$onC, _handler$handlers12, _handler$handlers$cha, _handler$handlers13;\n        (_handler$handlers$onC = (_handler$handlers12 = handler.handlers).onChange) === null || _handler$handlers$onC === void 0 ? void 0 : _handler$handlers$onC.call(_handler$handlers12, (_handler$handlers$cha = (_handler$handlers13 = handler.handlers).changeEventCalculator) === null || _handler$handlers$cha === void 0 ? void 0 : _handler$handlers$cha.call(_handler$handlers13, event, lastUpdateEvent[handler.handlers.handlerTag]));\n        lastUpdateEvent[handler.handlers.handlerTag] = event;\n      }\n    }\n  } else {\n    var oldHandler = findOldGestureHandler(event.handlerTag);\n    if (oldHandler) {\n      var nativeEvent = {\n        nativeEvent: event\n      };\n      if (isStateChangeEvent(event)) {\n        oldHandler.onGestureStateChange(nativeEvent);\n      } else {\n        oldHandler.onGestureEvent(nativeEvent);\n      }\n      return;\n    }\n  }\n}\nexport function startListening() {\n  stopListening();\n  gestureHandlerEventSubscription = DeviceEventEmitter.addListener('onGestureHandlerEvent', onGestureHandlerEvent);\n  gestureHandlerStateChangeEventSubscription = DeviceEventEmitter.addListener('onGestureHandlerStateChange', onGestureHandlerEvent);\n}\nexport function stopListening() {\n  if (gestureHandlerEventSubscription) {\n    gestureHandlerEventSubscription.remove();\n    gestureHandlerEventSubscription = null;\n  }\n  if (gestureHandlerStateChangeEventSubscription) {\n    gestureHandlerStateChangeEventSubscription.remove();\n    gestureHandlerStateChangeEventSubscription = null;\n  }\n}","map":{"version":3,"mappings":"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","names":["State","TouchEventType","findHandler","findOldGestureHandler","tagMessage","gestureHandlerEventSubscription","gestureHandlerStateChangeEventSubscription","warningMessage","dummyStateManager","begin","console","warn","activate","end","fail","lastUpdateEvent","isStateChangeEvent","event","oldState","isTouchEvent","eventType","onGestureHandlerEvent","handler","handlerTag","UNDETERMINED","state","BEGAN","handlers","onBegin","ACTIVE","onStart","END","onEnd","onFinalize","undefined","FAILED","CANCELLED","TOUCHES_DOWN","onTouchesDown","TOUCHES_MOVE","onTouchesMove","TOUCHES_UP","onTouchesUp","TOUCHES_CANCELLED","onTouchesCancelled","onUpdate","onChange","changeEventCalculator","_handler$handlers$cha","oldHandler","nativeEvent","onGestureStateChange","onGestureEvent","startListening","stopListening","DeviceEventEmitter","addListener","remove"],"sources":["eventReceiver.ts"],"sourcesContent":["import { DeviceEventEmitter, EmitterSubscription } from 'react-native';\nimport { State } from '../../State';\nimport { TouchEventType } from '../../TouchEventType';\nimport {\n  GestureTouchEvent,\n  GestureUpdateEvent,\n  GestureStateChangeEvent,\n} from '../gestureHandlerCommon';\nimport { GestureStateManagerType } from './gestureStateManager';\nimport { findHandler, findOldGestureHandler } from '../handlersRegistry';\nimport { BaseGesture } from './gesture';\nimport { tagMessage } from '../../utils';\n\nlet gestureHandlerEventSubscription: EmitterSubscription | null = null;\nlet gestureHandlerStateChangeEventSubscription: EmitterSubscription | null = null;\n\nconst warningMessage = tagMessage(\n  'You have to use react-native-reanimated in order to control the state of the gesture.'\n);\n\nconst dummyStateManager: GestureStateManagerType = {\n  begin: () => {\n    console.warn(warningMessage);\n  },\n  activate: () => {\n    console.warn(warningMessage);\n  },\n  end: () => {\n    console.warn(warningMessage);\n  },\n  fail: () => {\n    console.warn(warningMessage);\n  },\n};\n\nconst lastUpdateEvent: (GestureUpdateEvent | undefined)[] = [];\n\nfunction isStateChangeEvent(\n  event: GestureUpdateEvent | GestureStateChangeEvent | GestureTouchEvent\n): event is GestureStateChangeEvent {\n  // @ts-ignore oldState doesn't exist on GestureTouchEvent and that's the point\n  return event.oldState != null;\n}\n\nfunction isTouchEvent(\n  event: GestureUpdateEvent | GestureStateChangeEvent | GestureTouchEvent\n): event is GestureTouchEvent {\n  return event.eventType != null;\n}\n\nexport function onGestureHandlerEvent(\n  event: GestureUpdateEvent | GestureStateChangeEvent | GestureTouchEvent\n) {\n  const handler = findHandler(event.handlerTag) as BaseGesture<\n    Record<string, unknown>\n  >;\n\n  if (handler) {\n    if (isStateChangeEvent(event)) {\n      if (\n        event.oldState === State.UNDETERMINED &&\n        event.state === State.BEGAN\n      ) {\n        handler.handlers.onBegin?.(event);\n      } else if (\n        (event.oldState === State.BEGAN ||\n          event.oldState === State.UNDETERMINED) &&\n        event.state === State.ACTIVE\n      ) {\n        handler.handlers.onStart?.(event);\n        lastUpdateEvent[handler.handlers.handlerTag] = event;\n      } else if (event.oldState !== event.state && event.state === State.END) {\n        if (event.oldState === State.ACTIVE) {\n          handler.handlers.onEnd?.(event, true);\n        }\n        handler.handlers.onFinalize?.(event, true);\n        lastUpdateEvent[handler.handlers.handlerTag] = undefined;\n      } else if (\n        (event.state === State.FAILED || event.state === State.CANCELLED) &&\n        event.oldState !== event.state\n      ) {\n        if (event.oldState === State.ACTIVE) {\n          handler.handlers.onEnd?.(event, false);\n        }\n        handler.handlers.onFinalize?.(event, false);\n        lastUpdateEvent[handler.handlers.handlerTag] = undefined;\n      }\n    } else if (isTouchEvent(event)) {\n      switch (event.eventType) {\n        case TouchEventType.TOUCHES_DOWN:\n          handler.handlers?.onTouchesDown?.(event, dummyStateManager);\n          break;\n        case TouchEventType.TOUCHES_MOVE:\n          handler.handlers?.onTouchesMove?.(event, dummyStateManager);\n          break;\n        case TouchEventType.TOUCHES_UP:\n          handler.handlers?.onTouchesUp?.(event, dummyStateManager);\n          break;\n        case TouchEventType.TOUCHES_CANCELLED:\n          handler.handlers?.onTouchesCancelled?.(event, dummyStateManager);\n          break;\n      }\n    } else {\n      handler.handlers.onUpdate?.(event);\n\n      if (handler.handlers.onChange && handler.handlers.changeEventCalculator) {\n        handler.handlers.onChange?.(\n          handler.handlers.changeEventCalculator?.(\n            event,\n            lastUpdateEvent[handler.handlers.handlerTag]\n          )\n        );\n\n        lastUpdateEvent[handler.handlers.handlerTag] = event;\n      }\n    }\n  } else {\n    const oldHandler = findOldGestureHandler(event.handlerTag);\n    if (oldHandler) {\n      const nativeEvent = { nativeEvent: event };\n      if (isStateChangeEvent(event)) {\n        oldHandler.onGestureStateChange(nativeEvent);\n      } else {\n        oldHandler.onGestureEvent(nativeEvent);\n      }\n      return;\n    }\n  }\n}\n\nexport function startListening() {\n  stopListening();\n\n  gestureHandlerEventSubscription = DeviceEventEmitter.addListener(\n    'onGestureHandlerEvent',\n    onGestureHandlerEvent\n  );\n\n  gestureHandlerStateChangeEventSubscription = DeviceEventEmitter.addListener(\n    'onGestureHandlerStateChange',\n    onGestureHandlerEvent\n  );\n}\n\nexport function stopListening() {\n  if (gestureHandlerEventSubscription) {\n    gestureHandlerEventSubscription.remove();\n    gestureHandlerEventSubscription = null;\n  }\n\n  if (gestureHandlerStateChangeEventSubscription) {\n    gestureHandlerStateChangeEventSubscription.remove();\n    gestureHandlerStateChangeEventSubscription = null;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}