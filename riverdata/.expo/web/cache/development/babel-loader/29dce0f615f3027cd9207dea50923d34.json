{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport React, { PureComponent } from 'react';\nimport createIconSet from \"./createIconSet\";\nexport default function createMultiStyleIconSet(styles) {\n  var optionsInput = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var styleNames = Object.keys(styles);\n  if (styleNames.length === 0) {\n    throw new Error('You need to add at least one style');\n  }\n  var options = _objectSpread({\n    defaultStyle: styleNames[0],\n    fallbackFamily: function fallbackFamily(_unused) {\n      return styleNames[0];\n    },\n    glyphValidator: function glyphValidator(_unused, __unused) {\n      return true;\n    }\n  }, optionsInput);\n  var iconSets = styleNames.reduce(function (acc, name) {\n    var style = styles[name];\n    acc[name] = createIconSet(style.glyphMap || {}, style.fontFamily || '', style.fontFile || '', style.fontStyle || {});\n    return acc;\n  }, {});\n  function styleFromProps(props) {\n    return Object.keys(props).reduce(function (result, propName) {\n      return styleNames.indexOf(propName) !== -1 && props[propName] === true ? propName : result;\n    }, options.defaultStyle);\n  }\n  function getIconSetForProps(props) {\n    var name = props.name;\n    var style = styleFromProps(props);\n    if (options.glyphValidator(name, style)) return iconSets[style];\n    var family = options.fallbackFamily(name);\n    if (styleNames.indexOf(family) === -1) {\n      return options.defaultStyle;\n    }\n    return iconSets[family];\n  }\n  function selectIconClass(iconSet, iconClass) {\n    return iconClass.length > 0 ? iconSet[iconClass] : iconSet;\n  }\n  function reduceProps(props) {\n    return Object.keys(props).reduce(function (acc, prop) {\n      if (styleNames.indexOf(prop) === -1) {\n        acc[prop] = props[prop];\n      }\n      return acc;\n    }, {});\n  }\n  function getStyledIconSet(style) {\n    var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    if (styleNames.indexOf(style) === -1) {\n      return iconSets[options.defaultStyle];\n    }\n    return !name ? iconSets[styleFromProps(_defineProperty({}, style, true))] : getIconSetForProps(_defineProperty({\n      name: name\n    }, style, true));\n  }\n  function getFontFamily() {\n    var style = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : options.defaultStyle;\n    return getStyledIconSet(style).getFontFamily();\n  }\n  function getRawGlyphMap() {\n    var style = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : options.defaultStyle;\n    return getStyledIconSet(style).getRawGlyphMap();\n  }\n  function hasIcon(name) {\n    var style = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : options.defaultStyle;\n    return options.glyphValidator(name, style);\n  }\n  function createStyledIconClass() {\n    var selectClass = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    var IconClass = function (_PureComponent) {\n      _inherits(IconClass, _PureComponent);\n      var _super = _createSuper(IconClass);\n      function IconClass() {\n        _classCallCheck(this, IconClass);\n        return _super.apply(this, arguments);\n      }\n      _createClass(IconClass, [{\n        key: \"render\",\n        value: function render() {\n          var selectedIconSet = getIconSetForProps(this.props);\n          var SelectedIconClass = selectIconClass(selectedIconSet, selectClass);\n          var props = reduceProps(this.props);\n          return React.createElement(SelectedIconClass, props);\n        }\n      }]);\n      return IconClass;\n    }(PureComponent);\n    IconClass.defaultProps = styleNames.reduce(function (acc, name) {\n      acc[name] = false;\n      return acc;\n    }, {});\n    IconClass.font = Object.values(styles).reduce(function (acc, style) {\n      acc[style.fontFamily] = style.fontFile;\n      return acc;\n    }, {});\n    IconClass.StyledIconSet = getStyledIconSet;\n    IconClass.getFontFamily = getFontFamily;\n    IconClass.getRawGlyphMap = getRawGlyphMap;\n    IconClass.hasIcon = hasIcon;\n    return IconClass;\n  }\n  var Icon = createStyledIconClass();\n  Icon.Button = createStyledIconClass('Button');\n  return Icon;\n}","map":{"version":3,"mappings":"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","names":["React","PureComponent","createIconSet","createMultiStyleIconSet","styles","optionsInput","styleNames","Object","keys","length","Error","options","defaultStyle","fallbackFamily","_unused","glyphValidator","__unused","iconSets","reduce","acc","name","style","glyphMap","fontFamily","fontFile","fontStyle","styleFromProps","props","result","propName","indexOf","getIconSetForProps","family","selectIconClass","iconSet","iconClass","reduceProps","prop","getStyledIconSet","getFontFamily","getRawGlyphMap","hasIcon","createStyledIconClass","selectClass","IconClass","selectedIconSet","SelectedIconClass","createElement","values","Icon","Button"],"sourceRoot":"","sources":["../src/createMultiStyleIconSet.ts"],"sourcesContent":["import React, { PureComponent } from 'react';\n\nimport createIconSet from './createIconSet';\n\ntype FontStyle = {\n  fontFamily: string;\n  fontFile: any;\n  glyphMap: any;\n  fontStyle: any;\n};\n\ntype FontStyles = {\n  [key: string]: FontStyle;\n};\n\nexport default function createMultiStyleIconSet(\n  styles: FontStyles,\n  optionsInput = {}\n): any {\n  const styleNames = Object.keys(styles);\n\n  if (styleNames.length === 0) {\n    throw new Error('You need to add at least one style');\n  }\n\n  const options = {\n    defaultStyle: styleNames[0],\n    fallbackFamily: (_unused: any) => styleNames[0],\n    glyphValidator: (_unused: any, __unused: any) => true,\n    ...optionsInput,\n  };\n\n  const iconSets = styleNames.reduce((acc, name) => {\n    const style = styles[name];\n\n    acc[name] = createIconSet(\n      style.glyphMap || {},\n      style.fontFamily || '',\n      style.fontFile || '',\n      style.fontStyle || {}\n    );\n\n    return acc;\n  }, {});\n\n  function styleFromProps(props) {\n    return Object.keys(props).reduce(\n      (result, propName) =>\n        styleNames.indexOf(propName) !== -1 && props[propName] === true\n          ? propName\n          : result,\n      options.defaultStyle\n    );\n  }\n\n  function getIconSetForProps(props) {\n    const { name } = props;\n    const style = styleFromProps(props);\n\n    if (options.glyphValidator(name, style)) return iconSets[style];\n\n    const family = options.fallbackFamily(name);\n\n    if (styleNames.indexOf(family) === -1) {\n      return options.defaultStyle;\n    }\n\n    return iconSets[family];\n  }\n\n  function selectIconClass(iconSet, iconClass) {\n    return iconClass.length > 0 ? iconSet[iconClass] : iconSet;\n  }\n\n  function reduceProps(props) {\n    return Object.keys(props).reduce((acc, prop) => {\n      if (styleNames.indexOf(prop) === -1) {\n        acc[prop] = props[prop];\n      }\n\n      return acc;\n    }, {});\n  }\n\n  function getStyledIconSet(style, name = '') {\n    if (styleNames.indexOf(style) === -1) {\n      return iconSets[options.defaultStyle];\n    }\n\n    return !name\n      ? iconSets[styleFromProps({ [style]: true })]\n      : getIconSetForProps({ name, [style]: true });\n  }\n\n  function getFontFamily(style = options.defaultStyle) {\n    return getStyledIconSet(style).getFontFamily();\n  }\n\n  function getRawGlyphMap(style = options.defaultStyle) {\n    return getStyledIconSet(style).getRawGlyphMap();\n  }\n\n  function hasIcon(name, style = options.defaultStyle) {\n    return options.glyphValidator(name, style);\n  }\n\n  function createStyledIconClass(selectClass = '') {\n    class IconClass extends PureComponent {\n      static defaultProps = styleNames.reduce((acc, name) => {\n        acc[name] = false;\n        return acc;\n      }, {});\n\n      static font = Object.values(styles).reduce((acc, style) => {\n        acc[style.fontFamily] = style.fontFile;\n        return acc;\n      }, {});\n\n      static Button: any;\n\n      static StyledIconSet = getStyledIconSet;\n      static getFontFamily = getFontFamily;\n      static getRawGlyphMap = getRawGlyphMap;\n      static hasIcon = hasIcon;\n\n      render() {\n        const selectedIconSet = getIconSetForProps(this.props);\n        const SelectedIconClass = selectIconClass(selectedIconSet, selectClass);\n        const props = reduceProps(this.props);\n\n        return React.createElement(SelectedIconClass, props);\n      }\n    }\n\n    return IconClass;\n  }\n\n  const Icon = createStyledIconClass();\n  Icon.Button = createStyledIconClass('Button');\n  return Icon;\n}\n"]},"metadata":{},"sourceType":"module"}