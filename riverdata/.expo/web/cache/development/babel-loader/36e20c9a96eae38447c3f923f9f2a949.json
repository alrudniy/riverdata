{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport SectionList from \"react-native-web/dist/exports/SectionList\";\nimport RefreshControl from \"react-native-web/dist/exports/RefreshControl\";\nimport { ScrollView as GHScrollView } from 'react-native-gesture-handler';\nimport createNavigationAwareScrollable from \"./createNavigationAwareScrollable\";\nimport invariant from \"./utils/invariant\";\nvar WrappedScrollView;\nif (Platform.OS === 'android') {\n  WrappedScrollView = createNavigationAwareScrollable(ScrollView);\n} else {\n  WrappedScrollView = createNavigationAwareScrollable(GHScrollView);\n}\nfunction propsMaybeWithRefreshControl(props) {\n  var onRefresh = props.onRefresh;\n  if (onRefresh) {\n    invariant(typeof props.refreshing === 'boolean', '`refreshing` prop must be set as a boolean in order to use `onRefresh`, but got `' + JSON.stringify(props.refreshing) + '`');\n    return _objectSpread(_objectSpread({}, props), {}, {\n      refreshControl: props.refreshControl == null ? React.createElement(RefreshControl, {\n        refreshing: props.refreshing,\n        onRefresh: onRefresh,\n        progressViewOffset: props.progressViewOffset\n      }) : props.refreshControl\n    });\n  } else {\n    return props;\n  }\n}\nvar WrappedFlatList = React.forwardRef(function (props, ref) {\n  return React.createElement(FlatList, _extends({\n    ref: ref\n  }, props, {\n    renderScrollComponent: function renderScrollComponent(props) {\n      return React.createElement(WrappedScrollView, propsMaybeWithRefreshControl(props));\n    }\n  }));\n});\nvar WrappedSectionList = React.forwardRef(function (props, ref) {\n  return React.createElement(SectionList, _extends({\n    ref: ref\n  }, props, {\n    renderScrollComponent: function renderScrollComponent(props) {\n      return React.createElement(WrappedScrollView, propsMaybeWithRefreshControl(props));\n    }\n  }));\n});\nexport { WrappedScrollView as ScrollView, WrappedFlatList as FlatList, WrappedSectionList as SectionList };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA,SAASC,UAAU,IAAIC,YAAvB,QAA2C,8BAA3C;AACA,OAAOC,+BAAP;AACA,OAAOC,SAAP;AAEA,IAAIC,iBAAJ;AACA,IAAIC,QAAQ,CAACC,EAAT,KAAgB,SAApB,EAA+B;EAI7BF,iBAAiB,GAAGF,+BAA+B,CAACF,UAAD,CAAnD;AACD,CALD,MAKO;EACLI,iBAAiB,GAAGF,+BAA+B,CAACD,YAAD,CAAnD;AACD;AAED,SAASM,4BAAT,CAAsCC,KAAtC,EAA6C;EAC3C,IAAMC,SAAS,GAAGD,KAAK,CAACC,SAAxB;EACA,IAAIA,SAAJ,EAAe;IACbN,SAAS,CACP,OAAOK,KAAK,CAACE,UAAb,KAA4B,SADrB,EAEP,sFACEC,IAAI,CAACC,SAAL,CAAeJ,KAAK,CAACE,UAArB,CADF,GAEE,GAJK,CAAT;IAMA,uCACKF,KADE;MAELK,cAAc,EACZL,KAAK,CAACK,cAAN,IAAwB,IAAxB,GACEd,oBAACe,cAAD;QACEJ,UAAU,EAAEF,KAAK,CAACE,UADpB;QAEED,SAAS,EAAEA,SAFb;QAGEM,kBAAkB,EAAEP,KAAK,CAACO;MAH5B,EADF,GAOEP,KAAK,CAACK;IAAAA;EAGb,CApBD,MAoBO;IACL,OAAOL,KAAP;EACD;AACF;AAED,IAAMQ,eAAe,GAAGjB,KAAK,CAACkB,UAAN,CAAiB,UAACT,KAAD,EAAQU,GAAR;EAAA,OACvCnB,oBAACoB,QAAD;IACED,GAAG,EAAEA;EADP,GAEMV,KAFN;IAGEY,qBAAqB,EAAGZ,oCAAD;MAAA,OACrBT,oBAACK,iBAAD,EAAuBG,4BAA4B,CAACC,KAAD,CAAnD;IAAA;EAJJ,GADsB;AAAA,EAAxB;AAUA,IAAMa,kBAAkB,GAAGtB,KAAK,CAACkB,UAAN,CAAiB,UAACT,KAAD,EAAQU,GAAR;EAAA,OAC1CnB,oBAACuB,WAAD;IACEJ,GAAG,EAAEA;EADP,GAEMV,KAFN;IAGEY,qBAAqB,EAAGZ,oCAAD;MAAA,OACrBT,oBAACK,iBAAD,EAAuBG,4BAA4B,CAACC,KAAD,CAAnD;IAAA;EAJJ,GADyB;AAAA,EAA3B;AAUA,SACEJ,iBAAiB,IAAIJ,UADvB,EAEEgB,eAAe,IAAIG,QAFrB,EAGEE,kBAAkB,IAAIC,WAHxB","names":["React","ScrollView","GHScrollView","createNavigationAwareScrollable","invariant","WrappedScrollView","Platform","OS","propsMaybeWithRefreshControl","props","onRefresh","refreshing","JSON","stringify","refreshControl","RefreshControl","progressViewOffset","WrappedFlatList","forwardRef","ref","FlatList","renderScrollComponent","WrappedSectionList","SectionList"],"sources":["Scrollables.js"],"sourcesContent":["import * as React from 'react';\nimport {\n  ScrollView,\n  Platform,\n  FlatList,\n  SectionList,\n  RefreshControl,\n} from 'react-native';\nimport { ScrollView as GHScrollView } from 'react-native-gesture-handler';\nimport createNavigationAwareScrollable from './createNavigationAwareScrollable';\nimport invariant from './utils/invariant';\n\nlet WrappedScrollView;\nif (Platform.OS === 'android') {\n  // @todo: use GHScrollView again when\n  // https://github.com/kmagiera/react-native-gesture-handler/issues/560 has\n  // been fixed.\n  WrappedScrollView = createNavigationAwareScrollable(ScrollView);\n} else {\n  WrappedScrollView = createNavigationAwareScrollable(GHScrollView);\n}\n\nfunction propsMaybeWithRefreshControl(props) {\n  const onRefresh = props.onRefresh;\n  if (onRefresh) {\n    invariant(\n      typeof props.refreshing === 'boolean',\n      '`refreshing` prop must be set as a boolean in order to use `onRefresh`, but got `' +\n        JSON.stringify(props.refreshing) +\n        '`'\n    );\n    return {\n      ...props,\n      refreshControl:\n        props.refreshControl == null ? (\n          <RefreshControl\n            refreshing={props.refreshing}\n            onRefresh={onRefresh}\n            progressViewOffset={props.progressViewOffset}\n          />\n        ) : (\n          props.refreshControl\n        ),\n    };\n  } else {\n    return props;\n  }\n}\n\nconst WrappedFlatList = React.forwardRef((props, ref) => (\n  <FlatList\n    ref={ref}\n    {...props}\n    renderScrollComponent={(props) => (\n      <WrappedScrollView {...propsMaybeWithRefreshControl(props)} />\n    )}\n  />\n));\n\nconst WrappedSectionList = React.forwardRef((props, ref) => (\n  <SectionList\n    ref={ref}\n    {...props}\n    renderScrollComponent={(props) => (\n      <WrappedScrollView {...propsMaybeWithRefreshControl(props)} />\n    )}\n  />\n));\n\nexport {\n  WrappedScrollView as ScrollView,\n  WrappedFlatList as FlatList,\n  WrappedSectionList as SectionList,\n};\n"]},"metadata":{},"sourceType":"module"}