{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport MapView, { Marker } from 'react-native-maps';\nimport ClusteredMapView from 'react-native-map-clustering';\nimport _ from 'lodash';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar states = [{\n  id: 'AL'\n}, {\n  id: 'AK'\n}, {\n  id: 'AZ'\n}, {\n  id: 'CO'\n}];\nvar USGSMap = function USGSMap() {\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    data = _useState2[0],\n    setData = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    loading = _useState4[0],\n    setLoading = _useState4[1];\n  var _useState5 = useState(''),\n    _useState6 = _slicedToArray(_useState5, 2),\n    err = _useState6[0],\n    setErr = _useState6[1];\n  var _useState7 = useState({\n      latitude: 39.50,\n      longitude: -98.35,\n      latitudeDelta: 50,\n      longitudeDelta: 50\n    }),\n    _useState8 = _slicedToArray(_useState7, 2),\n    region = _useState8[0],\n    setRegion = _useState8[1];\n  var fetchData = function () {\n    var _ref = _asyncToGenerator(function* () {\n      setLoading(true);\n      try {\n        yield* function* () {\n          var uniqueSites = {};\n          for (var state of states) {\n            try {\n              var response = yield fetch(\"https://waterservices.usgs.gov/nwis/iv?format=json&stateCd=\" + state.id, {\n                method: 'GET',\n                headers: {\n                  Accept: 'application/json'\n                }\n              });\n              if (!response.ok) {\n                throw new Error(\"Error! status: \" + response.status);\n              }\n              var result = yield response.json();\n              result.value.timeSeries.forEach(function (site) {\n                var siteId = site.sourceInfo.siteCode[0].value;\n                if (!uniqueSites[siteId]) {\n                  uniqueSites[siteId] = site;\n                }\n              });\n            } catch (error) {\n              console.error(\"Error fetching data for state \" + state.id + \":\", error.message);\n            }\n          }\n          setData(Object.values(uniqueSites));\n        }();\n      } catch (error) {\n        setErr(error.message);\n      } finally {\n        setLoading(false);\n      }\n    });\n    return function fetchData() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  useEffect(function () {\n    fetchData();\n  }, []);\n  var mappedData = data.map(function (site) {\n    return {\n      id: site.sourceInfo.siteCode[0].value,\n      coordinate: {\n        latitude: site.sourceInfo.geoLocation.geogLocation.latitude,\n        longitude: site.sourceInfo.geoLocation.geogLocation.longitude\n      },\n      title: site.sourceInfo.siteName\n    };\n  });\n  var handleRegionChangeComplete = _.debounce(function (newRegion) {\n    setRegion(newRegion);\n  }, 500);\n  return _jsx(View, {\n    style: styles.container,\n    children: _jsx(ClusteredMapView, {\n      style: styles.map,\n      initialRegion: region,\n      onRegionChangeComplete: handleRegionChangeComplete,\n      clusterColor: \"#00BFFF\",\n      animateClusters: false,\n      mapType: \"standard\",\n      radius: 100,\n      children: mappedData.map(function (marker, index) {\n        return renderMarker(marker, index);\n      })\n    })\n  });\n};\nvar renderMarker = function renderMarker(marker, index) {\n  return _jsx(Marker, {\n    coordinate: marker.coordinate,\n    title: marker.title\n  }, marker.id + \"-\" + index);\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff'\n  },\n  mapContainer: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  map: {\n    width: '100%',\n    height: '100%'\n  }\n});\nexport default USGSMap;","map":{"version":3,"names":["React","useState","useEffect","MapView","Marker","ClusteredMapView","_","states","id","USGSMap","data","setData","loading","setLoading","err","setErr","latitude","longitude","latitudeDelta","longitudeDelta","region","setRegion","fetchData","uniqueSites","state","response","fetch","method","headers","Accept","ok","Error","status","result","json","value","timeSeries","forEach","site","siteId","sourceInfo","siteCode","error","console","message","Object","values","mappedData","map","coordinate","geoLocation","geogLocation","title","siteName","handleRegionChangeComplete","debounce","newRegion","styles","container","marker","index","renderMarker","StyleSheet","create","flex","backgroundColor","mapContainer","alignItems","justifyContent","width","height"],"sources":["C:/Users/subte/RD2/riverdata/riverdata/components/USGSMap.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { View, StyleSheet, Text } from 'react-native';\r\nimport MapView, { Marker } from 'react-native-maps';\r\nimport ClusteredMapView from 'react-native-map-clustering';\r\nimport _ from 'lodash';\r\n\r\nconst states = [\r\n  { id: 'AL' }, { id: 'AK' }, { id: 'AZ' }, { id: 'CO' }\r\n];\r\n\r\nconst USGSMap = () => {\r\n  const [data, setData] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [err, setErr] = useState('');\r\n  const [region, setRegion] = useState({\r\n    latitude: 39.50,\r\n    longitude: -98.35,\r\n    latitudeDelta: 50,\r\n    longitudeDelta: 50,\r\n  });\r\n\r\n  const fetchData = async () => {\r\n    setLoading(true);\r\n\r\n    try {\r\n      const uniqueSites = {};\r\n\r\n      for (const state of states) {\r\n        try {\r\n          const response = await fetch(`https://waterservices.usgs.gov/nwis/iv?format=json&stateCd=${state.id}`, {\r\n            method: 'GET',\r\n            headers: {\r\n              Accept: 'application/json',\r\n            },\r\n          });\r\n\r\n          if (!response.ok) {\r\n            throw new Error(`Error! status: ${response.status}`);\r\n          }\r\n\r\n          const result = await response.json();\r\n          result.value.timeSeries.forEach((site) => {\r\n            const siteId = site.sourceInfo.siteCode[0].value;\r\n            if (!uniqueSites[siteId]) {\r\n              uniqueSites[siteId] = site;\r\n            }\r\n          });\r\n        } catch (error) {\r\n          console.error(`Error fetching data for state ${state.id}:`, error.message);\r\n        }\r\n      }\r\n\r\n      setData(Object.values(uniqueSites));\r\n    } catch (error) {\r\n      setErr(error.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  const mappedData = data.map((site) => ({\r\n    id: site.sourceInfo.siteCode[0].value,\r\n    coordinate: {\r\n      latitude: site.sourceInfo.geoLocation.geogLocation.latitude,\r\n      longitude: site.sourceInfo.geoLocation.geogLocation.longitude,\r\n    },\r\n    title: site.sourceInfo.siteName,\r\n  }));\r\n\r\n  const handleRegionChangeComplete = _.debounce((newRegion) => {\r\n    setRegion(newRegion);\r\n  }, 500);\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <ClusteredMapView\r\n        style={styles.map}\r\n        initialRegion={region}\r\n        onRegionChangeComplete={handleRegionChangeComplete}\r\n        clusterColor=\"#00BFFF\"\r\n        animateClusters={false}\r\n        mapType=\"standard\"\r\n        radius={100} \r\n      >\r\n        {mappedData.map((marker, index) => renderMarker(marker, index))}\r\n      </ClusteredMapView>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst renderMarker = (marker, index) => {\r\n  return (\r\n    <Marker\r\n      key={`${marker.id}-${index}`}\r\n      coordinate={marker.coordinate}\r\n      title={marker.title}\r\n    />\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: '#fff',\r\n  },\r\n  mapContainer: {\r\n    flex: 1,\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  map: {\r\n    width: '100%',\r\n    height: '100%',\r\n  },\r\n});\r\n\r\nexport default USGSMap;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}