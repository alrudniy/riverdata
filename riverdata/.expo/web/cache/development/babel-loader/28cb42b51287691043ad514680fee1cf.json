{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { useNavigation } from '@react-navigation/native';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar RDSiteGaugesScreen = function RDSiteGaugesScreen(_ref) {\n  var route = _ref.route;\n  var _useState = useState({\n      value: {\n        timeSeries: []\n      }\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    data = _useState2[0],\n    setData = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    isLoading = _useState4[0],\n    setIsLoading = _useState4[1];\n  var _useState5 = useState(''),\n    _useState6 = _slicedToArray(_useState5, 2),\n    err = _useState6[0],\n    setErr = _useState6[1];\n  var gaugeId = route.params.gaugeId;\n  var navigation = useNavigation();\n  var handleClick = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      setIsLoading(true);\n      try {\n        var response = yield fetch(\"https://waterservices.usgs.gov/nwis/iv/?format=json&site=\" + gaugeId, {\n          method: 'GET',\n          headers: {\n            Accept: 'application/json'\n          }\n        });\n        if (!response.ok) {\n          throw new Error('Error! status: ' + response.status);\n        }\n        var result = yield response.json();\n        setData(result);\n      } catch (err) {\n        setErr(err.message);\n      } finally {\n        setIsLoading(false);\n      }\n    });\n    return function handleClick() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  useEffect(function () {\n    handleClick();\n  }, []);\n  var handleGaugePress = function handleGaugePress(item) {\n    navigation.navigate('Gauge Graph', {\n      gaugeId: gaugeId,\n      parameterCode: item.variable.variableCode\n    });\n  };\n  var renderGauge = function renderGauge(_ref3) {\n    var item = _ref3.item;\n    return _jsxs(TouchableOpacity, {\n      style: styles.gaugeContainer,\n      onPress: function onPress() {\n        return handleGaugePress(item);\n      },\n      children: [_jsx(Text, {\n        style: styles.gaugeName,\n        children: item.variable.variableName\n      }), _jsxs(View, {\n        style: styles.gaugeInfoContainer,\n        children: [_jsxs(Text, {\n          style: styles.gaugeValue,\n          children: [\"Value: \", item.values[0].value[0].value]\n        }), _jsxs(Text, {\n          style: styles.gaugeUnits,\n          children: [\"Units: \", item.variable.unit.unitCode]\n        })]\n      })]\n    });\n  };\n  return _jsxs(View, {\n    style: styles.container,\n    children: [err && _jsx(Text, {\n      style: styles.error,\n      children: err\n    }), isLoading && _jsx(Text, {\n      style: styles.loading,\n      children: \"Loading...\"\n    }), _jsx(FlatList, {\n      style: styles.gaugesList,\n      data: data.value.timeSeries,\n      keyExtractor: function keyExtractor(item, index) {\n        return index.toString();\n      },\n      renderItem: renderGauge\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#FFFFFF',\n    padding: 20\n  },\n  error: {\n    color: '#FF0000',\n    fontSize: 18,\n    fontWeight: 'bold',\n    textAlign: 'center',\n    marginBottom: 10\n  },\n  loading: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    textAlign: 'center',\n    marginBottom: 10\n  },\n  gaugesList: {\n    marginTop: 10\n  },\n  gaugeContainer: {\n    backgroundColor: '#F5F5F5',\n    borderRadius: 5,\n    padding: 10,\n    marginBottom: 10\n  },\n  gaugeName: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    marginBottom: 5\n  },\n  gaugeInfoContainer: {\n    flexDirection: 'row'\n  },\n  gaugeValue: {\n    fontSize: 14,\n    marginRight: 10\n  },\n  gaugeUnits: {\n    fontSize: 14\n  }\n});\nexport default RDSiteGaugesScreen;","map":{"version":3,"names":["React","useEffect","useState","useNavigation","RDSiteGaugesScreen","route","value","timeSeries","data","setData","isLoading","setIsLoading","err","setErr","gaugeId","params","navigation","handleClick","response","fetch","method","headers","Accept","ok","Error","status","result","json","message","handleGaugePress","item","navigate","parameterCode","variable","variableCode","renderGauge","styles","gaugeContainer","gaugeName","variableName","gaugeInfoContainer","gaugeValue","values","gaugeUnits","unit","unitCode","container","error","loading","gaugesList","index","toString","StyleSheet","create","flex","backgroundColor","padding","color","fontSize","fontWeight","textAlign","marginBottom","marginTop","borderRadius","flexDirection","marginRight"],"sources":["C:/Users/subte/RDspring23/riverdata/riverdata/components/RDSiteGauges.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { View, Text, FlatList, StyleSheet, TouchableOpacity } from 'react-native';\r\nimport { useNavigation } from '@react-navigation/native';\r\n\r\nconst RDSiteGaugesScreen = ({ route }) => {\r\n  const [data, setData] = useState({value: {timeSeries: []}});\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [err, setErr] = useState('');\r\n  const { gaugeId } = route.params;\r\n  const navigation = useNavigation();\r\n\r\n  const handleClick = async () => {\r\n    setIsLoading(true);\r\n    try {\r\n      const response = await fetch(`https://waterservices.usgs.gov/nwis/iv/?format=json&site=${gaugeId}`, {\r\n        method: 'GET',\r\n        headers: {\r\n          Accept: 'application/json',\r\n        },\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Error! status: ' + response.status);\r\n      }\r\n\r\n      const result = await response.json();\r\n      setData(result);\r\n    } catch (err) {\r\n      setErr(err.message);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }\r\n\r\n  useEffect(()=> {\r\n    handleClick();\r\n  }, [])\r\n\r\n  const handleGaugePress = (item) => {\r\n    navigation.navigate('Gauge Graph', {gaugeId: gaugeId, parameterCode: item.variable.variableCode});\r\n  }\r\n\r\n  const renderGauge = ({item}) => (\r\n    <TouchableOpacity style={styles.gaugeContainer} onPress={() => handleGaugePress(item)}>\r\n      <Text style={styles.gaugeName}>{item.variable.variableName}</Text>\r\n      <View style={styles.gaugeInfoContainer}>\r\n        <Text style={styles.gaugeValue}>Value: {item.values[0].value[0].value}</Text>\r\n        <Text style={styles.gaugeUnits}>Units: {item.variable.unit.unitCode}</Text>\r\n      </View>\r\n    </TouchableOpacity>\r\n  );\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      {err && <Text style={styles.error}>{err}</Text>}\r\n      {isLoading && <Text style={styles.loading}>Loading...</Text>}\r\n      <FlatList\r\n        style={styles.gaugesList}\r\n        data={data.value.timeSeries}\r\n        keyExtractor={(item, index) => index.toString()}\r\n        renderItem={renderGauge}\r\n      />\r\n    </View>\r\n  )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: '#FFFFFF',\r\n    padding: 20,\r\n  },\r\n  error: {\r\n    color: '#FF0000',\r\n    fontSize: 18,\r\n    fontWeight: 'bold',\r\n    textAlign: 'center',\r\n    marginBottom: 10,\r\n  },\r\n  loading: {\r\n    fontSize: 18,\r\n    fontWeight: 'bold',\r\n    textAlign: 'center',\r\n    marginBottom: 10,\r\n  },\r\n  gaugesList: {\r\n    marginTop: 10,\r\n  },\r\n  gaugeContainer: {\r\n    backgroundColor: '#F5F5F5',\r\n    borderRadius: 5,\r\n    padding: 10,\r\n    marginBottom: 10,\r\n  },\r\n  gaugeName: {\r\n    fontSize: 16,\r\n    fontWeight: 'bold',\r\n    marginBottom: 5,\r\n  },\r\n  gaugeInfoContainer: {\r\n    flexDirection: 'row',\r\n  },\r\n  gaugeValue: {\r\n    fontSize: 14,\r\n    marginRight: 10,\r\n  },\r\n  gaugeUnits: {\r\n    fontSize: 14,\r\n  },\r\n});\r\n\r\nexport default RDSiteGaugesScreen;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC;AAAA;AAAA;AAAA;AAAA;AAEnD,SAASC,aAAa,QAAQ,0BAA0B;AAAC;AAAA;AAEzD,IAAMC,kBAAkB,GAAG,SAArBA,kBAAkB,OAAkB;EAAA,IAAZC,KAAK,QAALA,KAAK;EACjC,gBAAwBH,QAAQ,CAAC;MAACI,KAAK,EAAE;QAACC,UAAU,EAAE;MAAE;IAAC,CAAC,CAAC;IAAA;IAApDC,IAAI;IAAEC,OAAO;EACpB,iBAAkCP,QAAQ,CAAC,KAAK,CAAC;IAAA;IAA1CQ,SAAS;IAAEC,YAAY;EAC9B,iBAAsBT,QAAQ,CAAC,EAAE,CAAC;IAAA;IAA3BU,GAAG;IAAEC,MAAM;EAClB,IAAQC,OAAO,GAAKT,KAAK,CAACU,MAAM,CAAxBD,OAAO;EACf,IAAME,UAAU,GAAGb,aAAa,EAAE;EAElC,IAAMc,WAAW;IAAA,8BAAG,aAAY;MAC9BN,YAAY,CAAC,IAAI,CAAC;MAClB,IAAI;QACF,IAAMO,QAAQ,SAASC,KAAK,+DAA6DL,OAAO,EAAI;UAClGM,MAAM,EAAE,KAAK;UACbC,OAAO,EAAE;YACPC,MAAM,EAAE;UACV;QACF,CAAC,CAAC;QAEF,IAAI,CAACJ,QAAQ,CAACK,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,iBAAiB,GAAGN,QAAQ,CAACO,MAAM,CAAC;QACtD;QAEA,IAAMC,MAAM,SAASR,QAAQ,CAACS,IAAI,EAAE;QACpClB,OAAO,CAACiB,MAAM,CAAC;MACjB,CAAC,CAAC,OAAOd,GAAG,EAAE;QACZC,MAAM,CAACD,GAAG,CAACgB,OAAO,CAAC;MACrB,CAAC,SAAS;QACRjB,YAAY,CAAC,KAAK,CAAC;MACrB;IACF,CAAC;IAAA,gBArBKM,WAAW;MAAA;IAAA;EAAA,GAqBhB;EAEDhB,SAAS,CAAC,YAAK;IACbgB,WAAW,EAAE;EACf,CAAC,EAAE,EAAE,CAAC;EAEN,IAAMY,gBAAgB,GAAG,SAAnBA,gBAAgB,CAAIC,IAAI,EAAK;IACjCd,UAAU,CAACe,QAAQ,CAAC,aAAa,EAAE;MAACjB,OAAO,EAAEA,OAAO;MAAEkB,aAAa,EAAEF,IAAI,CAACG,QAAQ,CAACC;IAAY,CAAC,CAAC;EACnG,CAAC;EAED,IAAMC,WAAW,GAAG,SAAdA,WAAW;IAAA,IAAKL,IAAI,SAAJA,IAAI;IAAA,OACxB,MAAC,gBAAgB;MAAC,KAAK,EAAEM,MAAM,CAACC,cAAe;MAAC,OAAO,EAAE;QAAA,OAAMR,gBAAgB,CAACC,IAAI,CAAC;MAAA,CAAC;MAAA,WACpF,KAAC,IAAI;QAAC,KAAK,EAAEM,MAAM,CAACE,SAAU;QAAA,UAAER,IAAI,CAACG,QAAQ,CAACM;MAAY,EAAQ,EAClE,MAAC,IAAI;QAAC,KAAK,EAAEH,MAAM,CAACI,kBAAmB;QAAA,WACrC,MAAC,IAAI;UAAC,KAAK,EAAEJ,MAAM,CAACK,UAAW;UAAA,sBAASX,IAAI,CAACY,MAAM,CAAC,CAAC,CAAC,CAACpC,KAAK,CAAC,CAAC,CAAC,CAACA,KAAK;QAAA,EAAQ,EAC7E,MAAC,IAAI;UAAC,KAAK,EAAE8B,MAAM,CAACO,UAAW;UAAA,sBAASb,IAAI,CAACG,QAAQ,CAACW,IAAI,CAACC,QAAQ;QAAA,EAAQ;MAAA,EACtE;IAAA,EACU;EAAA,CACpB;EAED,OACE,MAAC,IAAI;IAAC,KAAK,EAAET,MAAM,CAACU,SAAU;IAAA,WAC3BlC,GAAG,IAAI,KAAC,IAAI;MAAC,KAAK,EAAEwB,MAAM,CAACW,KAAM;MAAA,UAAEnC;IAAG,EAAQ,EAC9CF,SAAS,IAAI,KAAC,IAAI;MAAC,KAAK,EAAE0B,MAAM,CAACY,OAAQ;MAAA;IAAA,EAAkB,EAC5D,KAAC,QAAQ;MACP,KAAK,EAAEZ,MAAM,CAACa,UAAW;MACzB,IAAI,EAAEzC,IAAI,CAACF,KAAK,CAACC,UAAW;MAC5B,YAAY,EAAE,sBAACuB,IAAI,EAAEoB,KAAK;QAAA,OAAKA,KAAK,CAACC,QAAQ,EAAE;MAAA,CAAC;MAChD,UAAU,EAAEhB;IAAY,EACxB;EAAA,EACG;AAEX,CAAC;AAED,IAAMC,MAAM,GAAGgB,UAAU,CAACC,MAAM,CAAC;EAC/BP,SAAS,EAAE;IACTQ,IAAI,EAAE,CAAC;IACPC,eAAe,EAAE,SAAS;IAC1BC,OAAO,EAAE;EACX,CAAC;EACDT,KAAK,EAAE;IACLU,KAAK,EAAE,SAAS;IAChBC,QAAQ,EAAE,EAAE;IACZC,UAAU,EAAE,MAAM;IAClBC,SAAS,EAAE,QAAQ;IACnBC,YAAY,EAAE;EAChB,CAAC;EACDb,OAAO,EAAE;IACPU,QAAQ,EAAE,EAAE;IACZC,UAAU,EAAE,MAAM;IAClBC,SAAS,EAAE,QAAQ;IACnBC,YAAY,EAAE;EAChB,CAAC;EACDZ,UAAU,EAAE;IACVa,SAAS,EAAE;EACb,CAAC;EACDzB,cAAc,EAAE;IACdkB,eAAe,EAAE,SAAS;IAC1BQ,YAAY,EAAE,CAAC;IACfP,OAAO,EAAE,EAAE;IACXK,YAAY,EAAE;EAChB,CAAC;EACDvB,SAAS,EAAE;IACToB,QAAQ,EAAE,EAAE;IACZC,UAAU,EAAE,MAAM;IAClBE,YAAY,EAAE;EAChB,CAAC;EACDrB,kBAAkB,EAAE;IAClBwB,aAAa,EAAE;EACjB,CAAC;EACDvB,UAAU,EAAE;IACViB,QAAQ,EAAE,EAAE;IACZO,WAAW,EAAE;EACf,CAAC;EACDtB,UAAU,EAAE;IACVe,QAAQ,EAAE;EACZ;AACF,CAAC,CAAC;AAEF,eAAetD,kBAAkB"},"metadata":{},"sourceType":"module"}