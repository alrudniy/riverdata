{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Marker from \"./MapMarker\";\nimport Polyline from \"./MapPolyline\";\nimport Polygon from \"./MapPolygon\";\nimport { ColorPropType } from 'deprecated-react-native-prop-types';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar propTypes = {\n  geojson: PropTypes.object.isRequired,\n  strokeColor: ColorPropType,\n  fillColor: ColorPropType,\n  strokeWidth: PropTypes.number,\n  lineDashPhase: PropTypes.number,\n  tappable: PropTypes.bool,\n  lineDashPattern: PropTypes.arrayOf(PropTypes.number),\n  lineCap: PropTypes.oneOf(['butt', 'round', 'square']),\n  lineJoin: PropTypes.oneOf(['miter', 'round', 'bevel']),\n  miterLimit: PropTypes.number,\n  zIndex: PropTypes.number,\n  onPress: PropTypes.func,\n  markerComponent: PropTypes.node,\n  title: PropTypes.string\n};\nvar Geojson = function Geojson(props) {\n  var title = props.title,\n    image = props.image,\n    zIndex = props.zIndex,\n    _onPress = props.onPress,\n    lineCap = props.lineCap,\n    lineJoin = props.lineJoin,\n    tappable = props.tappable,\n    miterLimit = props.miterLimit,\n    lineDashPhase = props.lineDashPhase,\n    lineDashPattern = props.lineDashPattern,\n    markerComponent = props.markerComponent;\n  var overlays = makeOverlays(props.geojson.features);\n  return _jsx(React.Fragment, {\n    children: overlays.map(function (overlay, index) {\n      var fillColor = getColor(props, overlay, 'fill', 'fillColor');\n      var strokeColor = getColor(props, overlay, 'stroke', 'strokeColor');\n      var markerColor = getColor(props, overlay, 'marker-color', 'color');\n      var strokeWidth = getStrokeWidth(props, overlay);\n      if (overlay.type === 'point') {\n        return _jsx(Marker, {\n          coordinate: overlay.coordinates,\n          image: image,\n          title: title,\n          pinColor: markerColor,\n          zIndex: zIndex,\n          onPress: function onPress() {\n            return _onPress && _onPress(overlay);\n          },\n          children: markerComponent\n        }, index);\n      }\n      if (overlay.type === 'polygon') {\n        return _jsx(Polygon, {\n          coordinates: overlay.coordinates,\n          holes: overlay.holes,\n          strokeColor: strokeColor,\n          fillColor: fillColor,\n          strokeWidth: strokeWidth,\n          tappable: tappable,\n          onPress: function onPress() {\n            return _onPress && _onPress(overlay);\n          },\n          zIndex: zIndex\n        }, index);\n      }\n      if (overlay.type === 'polyline') {\n        return _jsx(Polyline, {\n          coordinates: overlay.coordinates,\n          strokeColor: strokeColor,\n          strokeWidth: strokeWidth,\n          lineDashPhase: lineDashPhase,\n          lineDashPattern: lineDashPattern,\n          lineCap: lineCap,\n          lineJoin: lineJoin,\n          miterLimit: miterLimit,\n          zIndex: zIndex,\n          tappable: tappable,\n          onPress: function onPress() {\n            return _onPress && _onPress(overlay);\n          }\n        }, index);\n      }\n    })\n  });\n};\nGeojson.propTypes = propTypes;\nexport default Geojson;\nexport var makeOverlays = function makeOverlays(features) {\n  var points = features.filter(function (f) {\n    return f.geometry && (f.geometry.type === 'Point' || f.geometry.type === 'MultiPoint');\n  }).map(function (feature) {\n    return makeCoordinates(feature).map(function (coordinates) {\n      return makeOverlay(coordinates, feature);\n    });\n  }).reduce(flatten, []).map(function (overlay) {\n    return _objectSpread(_objectSpread({}, overlay), {}, {\n      type: 'point'\n    });\n  });\n  var lines = features.filter(function (f) {\n    return f.geometry && (f.geometry.type === 'LineString' || f.geometry.type === 'MultiLineString');\n  }).map(function (feature) {\n    return makeCoordinates(feature).map(function (coordinates) {\n      return makeOverlay(coordinates, feature);\n    });\n  }).reduce(flatten, []).map(function (overlay) {\n    return _objectSpread(_objectSpread({}, overlay), {}, {\n      type: 'polyline'\n    });\n  });\n  var multipolygons = features.filter(function (f) {\n    return f.geometry && f.geometry.type === 'MultiPolygon';\n  }).map(function (feature) {\n    return makeCoordinates(feature).map(function (coordinates) {\n      return makeOverlay(coordinates, feature);\n    });\n  }).reduce(flatten, []);\n  var polygons = features.filter(function (f) {\n    return f.geometry && f.geometry.type === 'Polygon';\n  }).map(function (feature) {\n    return makeOverlay(makeCoordinates(feature), feature);\n  }).reduce(flatten, []).concat(multipolygons).map(function (overlay) {\n    return _objectSpread(_objectSpread({}, overlay), {}, {\n      type: 'polygon'\n    });\n  });\n  return points.concat(lines).concat(polygons);\n};\nvar flatten = function flatten(prev, curr) {\n  return prev.concat(curr);\n};\nvar makeOverlay = function makeOverlay(coordinates, feature) {\n  var overlay = {\n    feature: feature\n  };\n  if (feature.geometry.type === 'Polygon' || feature.geometry.type === 'MultiPolygon') {\n    overlay.coordinates = coordinates[0];\n    if (coordinates.length > 1) {\n      overlay.holes = coordinates.slice(1);\n    }\n  } else {\n    overlay.coordinates = coordinates;\n  }\n  return overlay;\n};\nvar makePoint = function makePoint(c) {\n  return {\n    latitude: c[1],\n    longitude: c[0]\n  };\n};\nvar makeLine = function makeLine(l) {\n  return l.map(makePoint);\n};\nvar makeCoordinates = function makeCoordinates(feature) {\n  var g = feature.geometry;\n  if (g.type === 'Point') {\n    return [makePoint(g.coordinates)];\n  } else if (g.type === 'MultiPoint') {\n    return g.coordinates.map(makePoint);\n  } else if (g.type === 'LineString') {\n    return [makeLine(g.coordinates)];\n  } else if (g.type === 'MultiLineString') {\n    return g.coordinates.map(makeLine);\n  } else if (g.type === 'Polygon') {\n    return g.coordinates.map(makeLine);\n  } else if (g.type === 'MultiPolygon') {\n    return g.coordinates.map(function (p) {\n      return p.map(makeLine);\n    });\n  } else {\n    return [];\n  }\n};\nvar doesOverlayContainProperty = function doesOverlayContainProperty(overlay, property) {\n  return overlay.feature && overlay.feature.properties && overlay.feature.properties[property];\n};\nvar getRgbaFromHex = function getRgbaFromHex(hex) {\n  var alpha = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  var _hex$match$map = hex.match(/\\w\\w/g).map(function (x) {\n      return parseInt(x, 16);\n    }),\n    _hex$match$map2 = _slicedToArray(_hex$match$map, 3),\n    r = _hex$match$map2[0],\n    g = _hex$match$map2[1],\n    b = _hex$match$map2[2];\n  return \"rgba(\" + r + \",\" + g + \",\" + b + \",\" + alpha + \")\";\n};\nvar getColor = function getColor(props, overlay, colorType, overrideColorProp) {\n  if (props.hasOwnProperty(overrideColorProp)) {\n    return props[overrideColorProp];\n  }\n  if (doesOverlayContainProperty(overlay, colorType)) {\n    var color = overlay.feature.properties[colorType];\n    var opacityProperty = colorType + '-opacity';\n    if (doesOverlayContainProperty(overlay, opacityProperty) && color[0] === '#') {\n      color = getRgbaFromHex(color, overlay.feature.properties[opacityProperty]);\n    }\n    return color;\n  }\n  return;\n};\nvar getStrokeWidth = function getStrokeWidth(props, overlay) {\n  if (props.hasOwnProperty('strokeWidth')) {\n    return props.strokeWidth;\n  }\n  if (doesOverlayContainProperty(overlay, 'stroke-width')) {\n    return overlay.feature.properties['stroke-width'];\n  }\n  return;\n};","map":{"version":3,"names":["React","PropTypes","Marker","Polyline","Polygon","ColorPropType","propTypes","geojson","object","isRequired","strokeColor","fillColor","strokeWidth","number","lineDashPhase","tappable","bool","lineDashPattern","arrayOf","lineCap","oneOf","lineJoin","miterLimit","zIndex","onPress","func","markerComponent","node","title","string","Geojson","props","image","overlays","makeOverlays","features","map","overlay","index","getColor","markerColor","getStrokeWidth","type","coordinates","holes","points","filter","f","geometry","feature","makeCoordinates","makeOverlay","reduce","flatten","lines","multipolygons","polygons","concat","prev","curr","length","slice","makePoint","c","latitude","longitude","makeLine","l","g","p","doesOverlayContainProperty","property","properties","getRgbaFromHex","hex","alpha","match","x","parseInt","r","b","colorType","overrideColorProp","hasOwnProperty","color","opacityProperty"],"sources":["C:/Users/subte/RD2/riverdata/riverdata/node_modules/react-native-maps/src/Geojson.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Marker from './MapMarker';\nimport Polyline from './MapPolyline';\nimport Polygon from './MapPolygon';\nimport { ColorPropType } from 'deprecated-react-native-prop-types';\n\nconst propTypes = {\n  /**\n   * [Geojson](https://geojson.org/) description of object.\n   */\n  geojson: PropTypes.object.isRequired,\n\n  /**\n   * The stroke color to use for the path.\n   */\n  strokeColor: ColorPropType,\n\n  /**\n   * The fill color to use for the path.\n   */\n  fillColor: ColorPropType,\n\n  /**\n   * The stroke width to use for the path.\n   */\n  strokeWidth: PropTypes.number,\n\n  /**\n   * The offset (in points) at which to start drawing the dash pattern.\n   *\n   * Use this property to start drawing a dashed line partway through a segment or gap. For\n   * example, a phase value of 6 for the patter 5-2-3-2 would cause drawing to begin in the\n   * middle of the first gap.\n   *\n   * The default value of this property is 0.\n   *\n   * @platform ios\n   */\n  lineDashPhase: PropTypes.number,\n\n  /**\n   * Make the `Polygon` or `Polyline` tappable\n   *\n   */\n  tappable: PropTypes.bool,\n\n  /**\n   * An array of numbers specifying the dash pattern to use for the path.\n   *\n   * The array contains one or more numbers that indicate the lengths (measured in points) of the\n   * line segments and gaps in the pattern. The values in the array alternate, starting with the\n   * first line segment length, followed by the first gap length, followed by the second line\n   * segment length, and so on.\n   *\n   * This property is set to `null` by default, which indicates no line dash pattern.\n   *\n   * @platform ios\n   */\n  lineDashPattern: PropTypes.arrayOf(PropTypes.number),\n\n  /**\n   * The line cap style to apply to the open ends of the path.\n   * The default style is `round`.\n   *\n   * @platform ios\n   */\n  lineCap: PropTypes.oneOf(['butt', 'round', 'square']),\n\n  /**\n   * The line join style to apply to corners of the path.\n   * The default style is `round`.\n   *\n   * @platform ios\n   */\n  lineJoin: PropTypes.oneOf(['miter', 'round', 'bevel']),\n\n  /**\n   * The limiting value that helps avoid spikes at junctions between connected line segments.\n   * The miter limit helps you avoid spikes in paths that use the `miter` `lineJoin` style. If\n   * the ratio of the miter length—that is, the diagonal length of the miter join—to the line\n   * thickness exceeds the miter limit, the joint is converted to a bevel join. The default\n   * miter limit is 10, which results in the conversion of miters whose angle at the joint\n   * is less than 11 degrees.\n   *\n   * @platform ios\n   */\n  miterLimit: PropTypes.number,\n\n  /**\n   * The order in which this tile overlay is drawn with respect to other overlays. An overlay\n   * with a larger z-index is drawn over overlays with smaller z-indices. The order of overlays\n   * with the same z-index is arbitrary. The default zIndex is 0.\n   *\n   * @platform android\n   */\n  zIndex: PropTypes.number,\n\n  /**\n   * Callback that is called when the user presses on the polygon\n   */\n  onPress: PropTypes.func,\n\n  /**\n   * Component to render in place of the default marker when the overlay type is a `point`\n   *\n   */\n  markerComponent: PropTypes.node,\n\n  /**\n   * The title of the marker. This is only used if the <Marker /> component has no children that\n   * are a `<Callout />`, in which case the default callout behavior will be used, which\n   * will show both the `title` and the `description`, if provided.\n   */\n  title: PropTypes.string,\n};\n\nconst Geojson = (props) => {\n  const {\n    title,\n    image,\n    zIndex,\n    onPress,\n    lineCap,\n    lineJoin,\n    tappable,\n    miterLimit,\n    lineDashPhase,\n    lineDashPattern,\n    markerComponent,\n  } = props;\n  const overlays = makeOverlays(props.geojson.features);\n  return (\n    <React.Fragment>\n      {overlays.map((overlay, index) => {\n        const fillColor = getColor(props, overlay, 'fill', 'fillColor');\n        const strokeColor = getColor(props, overlay, 'stroke', 'strokeColor');\n        const markerColor = getColor(props, overlay, 'marker-color', 'color');\n        const strokeWidth = getStrokeWidth(props, overlay);\n        if (overlay.type === 'point') {\n          return (\n            <Marker\n              key={index}\n              coordinate={overlay.coordinates}\n              image={image}\n              title={title}\n              pinColor={markerColor}\n              zIndex={zIndex}\n              onPress={() => onPress && onPress(overlay)}\n            >\n              {markerComponent}\n            </Marker>\n          );\n        }\n        if (overlay.type === 'polygon') {\n          return (\n            <Polygon\n              key={index}\n              coordinates={overlay.coordinates}\n              holes={overlay.holes}\n              strokeColor={strokeColor}\n              fillColor={fillColor}\n              strokeWidth={strokeWidth}\n              tappable={tappable}\n              onPress={() => onPress && onPress(overlay)}\n              zIndex={zIndex}\n            />\n          );\n        }\n        if (overlay.type === 'polyline') {\n          return (\n            <Polyline\n              key={index}\n              coordinates={overlay.coordinates}\n              strokeColor={strokeColor}\n              strokeWidth={strokeWidth}\n              lineDashPhase={lineDashPhase}\n              lineDashPattern={lineDashPattern}\n              lineCap={lineCap}\n              lineJoin={lineJoin}\n              miterLimit={miterLimit}\n              zIndex={zIndex}\n              tappable={tappable}\n              onPress={() => onPress && onPress(overlay)}\n            />\n          );\n        }\n      })}\n    </React.Fragment>\n  );\n};\n\nGeojson.propTypes = propTypes;\n\nexport default Geojson;\n\nexport const makeOverlays = (features) => {\n  const points = features\n    .filter(\n      (f) =>\n        f.geometry &&\n        (f.geometry.type === 'Point' || f.geometry.type === 'MultiPoint')\n    )\n    .map((feature) =>\n      makeCoordinates(feature).map((coordinates) =>\n        makeOverlay(coordinates, feature)\n      )\n    )\n    .reduce(flatten, [])\n    .map((overlay) => ({ ...overlay, type: 'point' }));\n\n  const lines = features\n    .filter(\n      (f) =>\n        f.geometry &&\n        (f.geometry.type === 'LineString' ||\n          f.geometry.type === 'MultiLineString')\n    )\n    .map((feature) =>\n      makeCoordinates(feature).map((coordinates) =>\n        makeOverlay(coordinates, feature)\n      )\n    )\n    .reduce(flatten, [])\n    .map((overlay) => ({ ...overlay, type: 'polyline' }));\n\n  const multipolygons = features\n    .filter((f) => f.geometry && f.geometry.type === 'MultiPolygon')\n    .map((feature) =>\n      makeCoordinates(feature).map((coordinates) =>\n        makeOverlay(coordinates, feature)\n      )\n    )\n    .reduce(flatten, []);\n\n  const polygons = features\n    .filter((f) => f.geometry && f.geometry.type === 'Polygon')\n    .map((feature) => makeOverlay(makeCoordinates(feature), feature))\n    .reduce(flatten, [])\n    .concat(multipolygons)\n    .map((overlay) => ({ ...overlay, type: 'polygon' }));\n\n  return points.concat(lines).concat(polygons);\n};\n\nconst flatten = (prev, curr) => prev.concat(curr);\n\nconst makeOverlay = (coordinates, feature) => {\n  let overlay = {\n    feature,\n  };\n  if (\n    feature.geometry.type === 'Polygon' ||\n    feature.geometry.type === 'MultiPolygon'\n  ) {\n    overlay.coordinates = coordinates[0];\n    if (coordinates.length > 1) {\n      overlay.holes = coordinates.slice(1);\n    }\n  } else {\n    overlay.coordinates = coordinates;\n  }\n  return overlay;\n};\n\nconst makePoint = (c) => ({ latitude: c[1], longitude: c[0] });\n\nconst makeLine = (l) => l.map(makePoint);\n\nconst makeCoordinates = (feature) => {\n  const g = feature.geometry;\n  if (g.type === 'Point') {\n    return [makePoint(g.coordinates)];\n  } else if (g.type === 'MultiPoint') {\n    return g.coordinates.map(makePoint);\n  } else if (g.type === 'LineString') {\n    return [makeLine(g.coordinates)];\n  } else if (g.type === 'MultiLineString') {\n    return g.coordinates.map(makeLine);\n  } else if (g.type === 'Polygon') {\n    return g.coordinates.map(makeLine);\n  } else if (g.type === 'MultiPolygon') {\n    return g.coordinates.map((p) => p.map(makeLine));\n  } else {\n    return [];\n  }\n};\n\nconst doesOverlayContainProperty = (overlay, property) => {\n  // Geojson may have 0 for the opacity when intention is to not specify the\n  // opacity. Therefore, we evaluate the truthiness of the propery where 0\n  // would return false.\n  return (\n    overlay.feature &&\n    overlay.feature.properties &&\n    overlay.feature.properties[property]\n  );\n};\n\nconst getRgbaFromHex = (hex, alpha = 1) => {\n  const [r, g, b] = hex.match(/\\w\\w/g).map((x) => parseInt(x, 16));\n  return `rgba(${r},${g},${b},${alpha})`;\n};\n\nconst getColor = (props, overlay, colorType, overrideColorProp) => {\n  if (props.hasOwnProperty(overrideColorProp)) {\n    return props[overrideColorProp];\n  }\n  if (doesOverlayContainProperty(overlay, colorType)) {\n    let color = overlay.feature.properties[colorType];\n    const opacityProperty = colorType + '-opacity';\n    if (\n      doesOverlayContainProperty(overlay, opacityProperty) &&\n      color[0] === '#'\n    ) {\n      color = getRgbaFromHex(\n        color,\n        overlay.feature.properties[opacityProperty]\n      );\n    }\n    return color;\n  }\n  return;\n};\n\nconst getStrokeWidth = (props, overlay) => {\n  if (props.hasOwnProperty('strokeWidth')) {\n    return props.strokeWidth;\n  }\n  if (doesOverlayContainProperty(overlay, 'stroke-width')) {\n    return overlay.feature.properties['stroke-width'];\n  }\n  return;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}