{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState, useLayoutEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { useNavigation } from '@react-navigation/native';\nimport he from 'he';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar RDSiteGaugesScreen = function RDSiteGaugesScreen(_ref) {\n  var route = _ref.route;\n  var _useState = useState({\n      value: {\n        timeSeries: []\n      }\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    data = _useState2[0],\n    setData = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    isLoading = _useState4[0],\n    setIsLoading = _useState4[1];\n  var _useState5 = useState(''),\n    _useState6 = _slicedToArray(_useState5, 2),\n    err = _useState6[0],\n    setErr = _useState6[1];\n  var _useState7 = useState(null),\n    _useState8 = _slicedToArray(_useState7, 2),\n    latitude = _useState8[0],\n    setLatitude = _useState8[1];\n  var _useState9 = useState(null),\n    _useState10 = _slicedToArray(_useState9, 2),\n    longitude = _useState10[0],\n    setLongitude = _useState10[1];\n  var _useState11 = useState({}),\n    _useState12 = _slicedToArray(_useState11, 2),\n    gaugeLocations = _useState12[0],\n    setGaugeLocations = _useState12[1];\n  var gaugeId = route.params.gaugeId;\n  var navigation = useNavigation();\n  var controller = null;\n  var handleClick = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      setIsLoading(true);\n      controller = new AbortController();\n      try {\n        var response = yield fetch(\"https://waterservices.usgs.gov/nwis/iv/?format=json&site=\" + gaugeId, {\n          method: 'GET',\n          headers: {\n            Accept: 'application/json'\n          },\n          signal: controller.signal\n        });\n        if (!response.ok) {\n          throw new Error('Error! status: ' + response.status);\n        }\n        var result = yield response.json();\n        setData(result);\n        var locations = {};\n        result.value.timeSeries.forEach(function (series) {\n          var siteName = series.sourceInfo.siteName;\n          var latitude = series.sourceInfo.geoLocation.latitude;\n          var longitude = series.sourceInfo.geoLocation.longitude;\n          locations[siteName] = {\n            latitude: latitude,\n            longitude: longitude\n          };\n        });\n        setGaugeLocations(locations);\n      } catch (err) {\n        setErr(err.message);\n      } finally {\n        setIsLoading(false);\n      }\n    });\n    return function handleClick() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  useEffect(function () {\n    handleClick();\n    return function () {\n      if (controller) {\n        controller.abort();\n      }\n    };\n  }, []);\n  useLayoutEffect(function () {\n    var siteName = data.value && data.value.timeSeries[0] && data.value.timeSeries[0].sourceInfo && data.value.timeSeries[0].sourceInfo.siteName;\n    navigation.setOptions({\n      title: siteName ? siteName : '',\n      headerTitle: siteName ? siteName : ''\n    });\n  });\n  var handleGaugePress = function handleGaugePress(item) {\n    var variableCode = item.variable.variableCode;\n    var parameterCode = variableCode ? variableCode[0].value : '';\n    navigation.navigate('Gauge Graph', {\n      gaugeId: gaugeId,\n      parameterCode: parameterCode\n    });\n  };\n  var renderGauge = function renderGauge(_ref3) {\n    var item = _ref3.item;\n    var lastUpdateTime = new Date(item.values[0].value[0].dateTime);\n    var formattedUpdateTime = lastUpdateTime.toLocaleDateString() + \" \" + lastUpdateTime.toLocaleTimeString([], {\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n    var gaugeName = he.decode(item.variable.variableName);\n    var gaugeUnits = he.decode(item.variable.unit.unitCode);\n    return _jsxs(TouchableOpacity, {\n      style: styles.gaugeContainer,\n      onPress: function onPress() {\n        return handleGaugePress(item);\n      },\n      children: [_jsx(Text, {\n        style: styles.gaugeName,\n        children: gaugeName\n      }), _jsxs(View, {\n        style: styles.gaugeInfoContainer,\n        children: [_jsxs(Text, {\n          style: styles.gaugeValue,\n          children: [\"Value: \", item.values[0].value[0].value]\n        }), _jsxs(Text, {\n          style: styles.gaugeUnits,\n          children: [\"Units: \", gaugeUnits]\n        })]\n      }), _jsxs(Text, {\n        style: styles.lastUpdateTime,\n        children: [\"Last Update: \", formattedUpdateTime]\n      })]\n    });\n  };\n  return _jsxs(View, {\n    style: styles.container,\n    children: [err && _jsx(Text, {\n      style: styles.error,\n      children: err\n    }), isLoading && _jsx(Text, {\n      style: styles.loading,\n      children: \"Loading...\"\n    }), _jsx(FlatList, {\n      style: styles.gaugesList,\n      data: data.value.timeSeries,\n      keyExtractor: function keyExtractor(item, index) {\n        return index.toString();\n      },\n      renderItem: renderGauge\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#FFFFFF',\n    padding: 20\n  },\n  lastUpdate: {\n    fontSize: 14,\n    marginTop: 5\n  },\n  error: {\n    color: '#FF0000',\n    fontSize: 18,\n    fontWeight: 'bold',\n    textAlign: 'center',\n    marginBottom: 10\n  },\n  loading: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    textAlign: 'center',\n    marginBottom: 10\n  },\n  lastUpdateContainer: {\n    flexDirection: 'row',\n    marginTop: 20,\n    marginBottom: 10\n  },\n  lastUpdateText: {\n    fontSize: 14,\n    marginRight: 5,\n    color: '#696969'\n  },\n  lastUpdateTime: {\n    fontSize: 14,\n    color: '#6B6B6C'\n  },\n  gaugesList: {\n    marginTop: 10\n  },\n  gaugeContainer: {\n    backgroundColor: '#F5F5F5',\n    borderRadius: 5,\n    padding: 10,\n    marginBottom: 10\n  },\n  gaugeName: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    marginBottom: 5\n  },\n  gaugeInfoContainer: {\n    flexDirection: 'row'\n  },\n  gaugeValue: {\n    fontSize: 14,\n    marginRight: 10,\n    marginBottom: 5\n  },\n  gaugeUnits: {\n    fontSize: 14\n  }\n});\nexport default RDSiteGaugesScreen;","map":{"version":3,"names":["React","useEffect","useState","useLayoutEffect","useNavigation","he","RDSiteGaugesScreen","route","value","timeSeries","data","setData","isLoading","setIsLoading","err","setErr","latitude","setLatitude","longitude","setLongitude","gaugeLocations","setGaugeLocations","gaugeId","params","navigation","controller","handleClick","AbortController","response","fetch","method","headers","Accept","signal","ok","Error","status","result","json","locations","forEach","series","siteName","sourceInfo","geoLocation","message","abort","setOptions","title","headerTitle","handleGaugePress","item","variableCode","variable","parameterCode","navigate","renderGauge","lastUpdateTime","Date","values","dateTime","formattedUpdateTime","toLocaleDateString","toLocaleTimeString","hour","minute","gaugeName","decode","variableName","gaugeUnits","unit","unitCode","styles","gaugeContainer","gaugeInfoContainer","gaugeValue","container","error","loading","gaugesList","index","toString","StyleSheet","create","flex","backgroundColor","padding","lastUpdate","fontSize","marginTop","color","fontWeight","textAlign","marginBottom","lastUpdateContainer","flexDirection","lastUpdateText","marginRight","borderRadius"],"sources":["C:/Users/subte/RD2/riverdata/riverdata/components/RDSiteGauges.js"],"sourcesContent":["import React, { useEffect, useState, useLayoutEffect } from 'react';\r\nimport { View, Text, FlatList, StyleSheet, TouchableOpacity } from 'react-native';\r\nimport { useNavigation } from '@react-navigation/native';\r\nimport he from 'he';\r\n\r\nconst RDSiteGaugesScreen = ({ route }) => {\r\n  const [data, setData] = useState({ value: { timeSeries: [] } });\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [err, setErr] = useState('');\r\n  const [latitude, setLatitude] = useState(null);\r\n  const [longitude, setLongitude] = useState(null);\r\n  const [gaugeLocations, setGaugeLocations] = useState({});\r\n  const { gaugeId } = route.params;\r\n  const navigation = useNavigation();\r\n  let controller = null;\r\n\r\n  const handleClick = async () => {\r\n    setIsLoading(true);\r\n    controller = new AbortController();\r\n    try {\r\n      const response = await fetch(`https://waterservices.usgs.gov/nwis/iv/?format=json&site=${gaugeId}`, {\r\n        method: 'GET',\r\n        headers: {\r\n          Accept: 'application/json',\r\n        },\r\n        signal: controller.signal,\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Error! status: ' + response.status);\r\n      }\r\n\r\n      const result = await response.json();\r\n      setData(result);\r\n      const locations = {};\r\n      result.value.timeSeries.forEach(series => {\r\n        const siteName = series.sourceInfo.siteName;\r\n        const latitude = series.sourceInfo.geoLocation.latitude;\r\n        const longitude = series.sourceInfo.geoLocation.longitude;\r\n        locations[siteName] = { latitude, longitude };\r\n      });\r\n      setGaugeLocations(locations);\r\n    } catch (err) {\r\n      setErr(err.message);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    handleClick();\r\n\r\n    return () => {\r\n      if (controller) {\r\n        controller.abort();\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  useLayoutEffect(() => {\r\n    const siteName = data.value && data.value.timeSeries[0] && data.value.timeSeries[0].sourceInfo && data.value.timeSeries[0].sourceInfo.siteName;\r\n    navigation.setOptions({\r\n      title: siteName ? siteName : '',\r\n      // Display siteName as the header title\r\n      headerTitle: siteName ? siteName : '',\r\n    });\r\n  },);\r\n\r\n  const handleGaugePress = (item) => {\r\n    const { variableCode } = item.variable;\r\n    const parameterCode = variableCode ? variableCode[0].value : '';\r\n    navigation.navigate('Gauge Graph', { gaugeId: gaugeId, parameterCode: parameterCode });\r\n  }\r\n  \r\n  const renderGauge = ({ item }) => {\r\n    const lastUpdateTime = new Date(item.values[0].value[0].dateTime);\r\n    const formattedUpdateTime = `${lastUpdateTime.toLocaleDateString()} ${lastUpdateTime.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}`;\r\n    const gaugeName = he.decode(item.variable.variableName);\r\n    const gaugeUnits = he.decode(item.variable.unit.unitCode);\r\n    return (\r\n      <TouchableOpacity style={styles.gaugeContainer} onPress={() => handleGaugePress(item)}>\r\n        <Text style={styles.gaugeName}>{gaugeName}</Text>\r\n        <View style={styles.gaugeInfoContainer}>\r\n          <Text style={styles.gaugeValue}>Value: {item.values[0].value[0].value}</Text>\r\n          <Text style={styles.gaugeUnits}>Units: {gaugeUnits}</Text>\r\n        </View>\r\n        <Text style={styles.lastUpdateTime}>Last Update: {formattedUpdateTime}</Text>\r\n      </TouchableOpacity>\r\n    );\r\n  };\r\n\r\n  \r\n  return (\r\n    <View style={styles.container}>\r\n      {err && <Text style={styles.error}>{err}</Text>}\r\n      {isLoading && <Text style={styles.loading}>Loading...</Text>}\r\n      <FlatList\r\n        style={styles.gaugesList}\r\n        data={data.value.timeSeries}\r\n        keyExtractor={(item, index) => index.toString()}\r\n        renderItem={renderGauge}\r\n      />\r\n    </View>\r\n  )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: '#FFFFFF',\r\n    padding: 20,\r\n  },\r\n  lastUpdate: {\r\n    fontSize: 14,\r\n    marginTop: 5,\r\n  },\r\n  error: {\r\n    color: '#FF0000',\r\n    fontSize: 18,\r\n    fontWeight: 'bold',\r\n    textAlign: 'center',\r\n    marginBottom: 10,\r\n  },\r\n  loading: {\r\n    fontSize: 18,\r\n    fontWeight: 'bold',\r\n    textAlign: 'center',\r\n    marginBottom: 10,\r\n  },\r\n  lastUpdateContainer: {\r\n    flexDirection: 'row',\r\n    marginTop: 20,\r\n    marginBottom: 10,\r\n  },\r\n  lastUpdateText: {\r\n    fontSize: 14,\r\n    marginRight: 5,\r\n    color: '#696969',\r\n  },\r\n  lastUpdateTime: {\r\n    fontSize: 14,\r\n    color: '#6B6B6C',\r\n  },  \r\n  gaugesList: {\r\n    marginTop: 10,\r\n  },\r\n  gaugeContainer: {\r\n    backgroundColor: '#F5F5F5',\r\n    borderRadius: 5,\r\n    padding: 10,\r\n    marginBottom: 10,\r\n  },\r\n  gaugeName: {\r\n    fontSize: 16,\r\n    fontWeight: 'bold',\r\n    marginBottom: 5,\r\n  },\r\n  gaugeInfoContainer: {\r\n    flexDirection: 'row',\r\n  },\r\n  gaugeValue: {\r\n    fontSize: 14,\r\n    marginRight: 10,\r\n    marginBottom: 5,\r\n  },\r\n  gaugeUnits: {\r\n    fontSize: 14,\r\n  },\r\n});\r\n\r\n\r\nexport default RDSiteGaugesScreen;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}