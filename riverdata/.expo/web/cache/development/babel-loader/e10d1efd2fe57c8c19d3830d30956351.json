{"ast":null,"code":"import DeviceEventEmitter from \"react-native-web/dist/exports/DeviceEventEmitter\";\nimport { State } from \"../../State\";\nimport { TouchEventType } from \"../../TouchEventType\";\nimport { findHandler, findOldGestureHandler } from \"../handlersRegistry\";\nimport { GestureStateManager } from \"./gestureStateManager\";\nvar gestureHandlerEventSubscription = null;\nvar gestureHandlerStateChangeEventSubscription = null;\nvar gestureStateManagers = new Map();\nvar lastUpdateEvent = [];\nfunction isStateChangeEvent(event) {\n  return event.oldState != null;\n}\nfunction isTouchEvent(event) {\n  return event.eventType != null;\n}\nexport function onGestureHandlerEvent(event) {\n  var _handler$handlers7, _handler$handlers7$on, _handler$handlers8, _handler$handlers8$on, _handler$handlers9, _handler$handlers9$on, _handler$handlers10, _handler$handlers10$o;\n  var handler = findHandler(event.handlerTag);\n  if (handler) {\n    if (isStateChangeEvent(event)) {\n      if (event.oldState === State.UNDETERMINED && event.state === State.BEGAN) {\n        var _handler$handlers$onB, _handler$handlers;\n        (_handler$handlers$onB = (_handler$handlers = handler.handlers).onBegin) === null || _handler$handlers$onB === void 0 ? void 0 : _handler$handlers$onB.call(_handler$handlers, event);\n      } else if ((event.oldState === State.BEGAN || event.oldState === State.UNDETERMINED) && event.state === State.ACTIVE) {\n        var _handler$handlers$onS, _handler$handlers2;\n        (_handler$handlers$onS = (_handler$handlers2 = handler.handlers).onStart) === null || _handler$handlers$onS === void 0 ? void 0 : _handler$handlers$onS.call(_handler$handlers2, event);\n        lastUpdateEvent[handler.handlers.handlerTag] = event;\n      } else if (event.oldState !== event.state && event.state === State.END) {\n        var _handler$handlers$onF, _handler$handlers4;\n        if (event.oldState === State.ACTIVE) {\n          var _handler$handlers$onE, _handler$handlers3;\n          (_handler$handlers$onE = (_handler$handlers3 = handler.handlers).onEnd) === null || _handler$handlers$onE === void 0 ? void 0 : _handler$handlers$onE.call(_handler$handlers3, event, true);\n        }\n        (_handler$handlers$onF = (_handler$handlers4 = handler.handlers).onFinalize) === null || _handler$handlers$onF === void 0 ? void 0 : _handler$handlers$onF.call(_handler$handlers4, event, true);\n        lastUpdateEvent[handler.handlers.handlerTag] = undefined;\n      } else if ((event.state === State.FAILED || event.state === State.CANCELLED) && event.oldState !== event.state) {\n        var _handler$handlers$onF2, _handler$handlers6;\n        if (event.oldState === State.ACTIVE) {\n          var _handler$handlers$onE2, _handler$handlers5;\n          (_handler$handlers$onE2 = (_handler$handlers5 = handler.handlers).onEnd) === null || _handler$handlers$onE2 === void 0 ? void 0 : _handler$handlers$onE2.call(_handler$handlers5, event, false);\n        }\n        (_handler$handlers$onF2 = (_handler$handlers6 = handler.handlers).onFinalize) === null || _handler$handlers$onF2 === void 0 ? void 0 : _handler$handlers$onF2.call(_handler$handlers6, event, false);\n        gestureStateManagers.delete(event.handlerTag);\n        lastUpdateEvent[handler.handlers.handlerTag] = undefined;\n      }\n    } else if (isTouchEvent(event)) {\n      if (!gestureStateManagers.has(event.handlerTag)) {\n        gestureStateManagers.set(event.handlerTag, GestureStateManager.create(event.handlerTag));\n      }\n\n      var manager = gestureStateManagers.get(event.handlerTag);\n      switch (event.eventType) {\n        case TouchEventType.TOUCHES_DOWN:\n          (_handler$handlers7 = handler.handlers) === null || _handler$handlers7 === void 0 ? void 0 : (_handler$handlers7$on = _handler$handlers7.onTouchesDown) === null || _handler$handlers7$on === void 0 ? void 0 : _handler$handlers7$on.call(_handler$handlers7, event, manager);\n          break;\n        case TouchEventType.TOUCHES_MOVE:\n          (_handler$handlers8 = handler.handlers) === null || _handler$handlers8 === void 0 ? void 0 : (_handler$handlers8$on = _handler$handlers8.onTouchesMove) === null || _handler$handlers8$on === void 0 ? void 0 : _handler$handlers8$on.call(_handler$handlers8, event, manager);\n          break;\n        case TouchEventType.TOUCHES_UP:\n          (_handler$handlers9 = handler.handlers) === null || _handler$handlers9 === void 0 ? void 0 : (_handler$handlers9$on = _handler$handlers9.onTouchesUp) === null || _handler$handlers9$on === void 0 ? void 0 : _handler$handlers9$on.call(_handler$handlers9, event, manager);\n          break;\n        case TouchEventType.TOUCHES_CANCELLED:\n          (_handler$handlers10 = handler.handlers) === null || _handler$handlers10 === void 0 ? void 0 : (_handler$handlers10$o = _handler$handlers10.onTouchesCancelled) === null || _handler$handlers10$o === void 0 ? void 0 : _handler$handlers10$o.call(_handler$handlers10, event, manager);\n          break;\n      }\n    } else {\n      var _handler$handlers$onU, _handler$handlers11;\n      (_handler$handlers$onU = (_handler$handlers11 = handler.handlers).onUpdate) === null || _handler$handlers$onU === void 0 ? void 0 : _handler$handlers$onU.call(_handler$handlers11, event);\n      if (handler.handlers.onChange && handler.handlers.changeEventCalculator) {\n        var _handler$handlers$onC, _handler$handlers12, _handler$handlers$cha, _handler$handlers13;\n        (_handler$handlers$onC = (_handler$handlers12 = handler.handlers).onChange) === null || _handler$handlers$onC === void 0 ? void 0 : _handler$handlers$onC.call(_handler$handlers12, (_handler$handlers$cha = (_handler$handlers13 = handler.handlers).changeEventCalculator) === null || _handler$handlers$cha === void 0 ? void 0 : _handler$handlers$cha.call(_handler$handlers13, event, lastUpdateEvent[handler.handlers.handlerTag]));\n        lastUpdateEvent[handler.handlers.handlerTag] = event;\n      }\n    }\n  } else {\n    var oldHandler = findOldGestureHandler(event.handlerTag);\n    if (oldHandler) {\n      var nativeEvent = {\n        nativeEvent: event\n      };\n      if (isStateChangeEvent(event)) {\n        oldHandler.onGestureStateChange(nativeEvent);\n      } else {\n        oldHandler.onGestureEvent(nativeEvent);\n      }\n      return;\n    }\n  }\n}\nexport function startListening() {\n  stopListening();\n  gestureHandlerEventSubscription = DeviceEventEmitter.addListener('onGestureHandlerEvent', onGestureHandlerEvent);\n  gestureHandlerStateChangeEventSubscription = DeviceEventEmitter.addListener('onGestureHandlerStateChange', onGestureHandlerEvent);\n}\nexport function stopListening() {\n  if (gestureHandlerEventSubscription) {\n    gestureHandlerEventSubscription.remove();\n    gestureHandlerEventSubscription = null;\n  }\n  if (gestureHandlerStateChangeEventSubscription) {\n    gestureHandlerStateChangeEventSubscription.remove();\n    gestureHandlerStateChangeEventSubscription = null;\n  }\n}","map":{"version":3,"mappings":"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","names":["State","TouchEventType","findHandler","findOldGestureHandler","GestureStateManager","gestureHandlerEventSubscription","gestureHandlerStateChangeEventSubscription","gestureStateManagers","Map","lastUpdateEvent","isStateChangeEvent","event","oldState","isTouchEvent","eventType","onGestureHandlerEvent","handler","handlerTag","UNDETERMINED","state","BEGAN","handlers","onBegin","ACTIVE","onStart","END","onEnd","onFinalize","undefined","FAILED","CANCELLED","delete","has","set","create","manager","get","TOUCHES_DOWN","onTouchesDown","TOUCHES_MOVE","onTouchesMove","TOUCHES_UP","onTouchesUp","TOUCHES_CANCELLED","onTouchesCancelled","onUpdate","onChange","changeEventCalculator","_handler$handlers$cha","oldHandler","nativeEvent","onGestureStateChange","onGestureEvent","startListening","stopListening","DeviceEventEmitter","addListener","remove"],"sources":["eventReceiver.ts"],"sourcesContent":["import { DeviceEventEmitter, EmitterSubscription } from 'react-native';\nimport { State } from '../../State';\nimport { TouchEventType } from '../../TouchEventType';\nimport {\n  GestureTouchEvent,\n  GestureUpdateEvent,\n  GestureStateChangeEvent,\n} from '../gestureHandlerCommon';\nimport { findHandler, findOldGestureHandler } from '../handlersRegistry';\nimport { BaseGesture } from './gesture';\nimport {\n  GestureStateManager,\n  GestureStateManagerType,\n} from './gestureStateManager';\n\nlet gestureHandlerEventSubscription: EmitterSubscription | null = null;\nlet gestureHandlerStateChangeEventSubscription: EmitterSubscription | null =\n  null;\n\nconst gestureStateManagers: Map<number, GestureStateManagerType> = new Map<\n  number,\n  GestureStateManagerType\n>();\n\nconst lastUpdateEvent: (GestureUpdateEvent | undefined)[] = [];\n\nfunction isStateChangeEvent(\n  event: GestureUpdateEvent | GestureStateChangeEvent | GestureTouchEvent\n): event is GestureStateChangeEvent {\n  // @ts-ignore oldState doesn't exist on GestureTouchEvent and that's the point\n  return event.oldState != null;\n}\n\nfunction isTouchEvent(\n  event: GestureUpdateEvent | GestureStateChangeEvent | GestureTouchEvent\n): event is GestureTouchEvent {\n  return event.eventType != null;\n}\n\nexport function onGestureHandlerEvent(\n  event: GestureUpdateEvent | GestureStateChangeEvent | GestureTouchEvent\n) {\n  const handler = findHandler(event.handlerTag) as BaseGesture<\n    Record<string, unknown>\n  >;\n\n  if (handler) {\n    if (isStateChangeEvent(event)) {\n      if (\n        event.oldState === State.UNDETERMINED &&\n        event.state === State.BEGAN\n      ) {\n        handler.handlers.onBegin?.(event);\n      } else if (\n        (event.oldState === State.BEGAN ||\n          event.oldState === State.UNDETERMINED) &&\n        event.state === State.ACTIVE\n      ) {\n        handler.handlers.onStart?.(event);\n        lastUpdateEvent[handler.handlers.handlerTag] = event;\n      } else if (event.oldState !== event.state && event.state === State.END) {\n        if (event.oldState === State.ACTIVE) {\n          handler.handlers.onEnd?.(event, true);\n        }\n        handler.handlers.onFinalize?.(event, true);\n        lastUpdateEvent[handler.handlers.handlerTag] = undefined;\n      } else if (\n        (event.state === State.FAILED || event.state === State.CANCELLED) &&\n        event.oldState !== event.state\n      ) {\n        if (event.oldState === State.ACTIVE) {\n          handler.handlers.onEnd?.(event, false);\n        }\n        handler.handlers.onFinalize?.(event, false);\n        gestureStateManagers.delete(event.handlerTag);\n        lastUpdateEvent[handler.handlers.handlerTag] = undefined;\n      }\n    } else if (isTouchEvent(event)) {\n      if (!gestureStateManagers.has(event.handlerTag)) {\n        gestureStateManagers.set(\n          event.handlerTag,\n          GestureStateManager.create(event.handlerTag)\n        );\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const manager = gestureStateManagers.get(event.handlerTag)!;\n\n      switch (event.eventType) {\n        case TouchEventType.TOUCHES_DOWN:\n          handler.handlers?.onTouchesDown?.(event, manager);\n          break;\n        case TouchEventType.TOUCHES_MOVE:\n          handler.handlers?.onTouchesMove?.(event, manager);\n          break;\n        case TouchEventType.TOUCHES_UP:\n          handler.handlers?.onTouchesUp?.(event, manager);\n          break;\n        case TouchEventType.TOUCHES_CANCELLED:\n          handler.handlers?.onTouchesCancelled?.(event, manager);\n          break;\n      }\n    } else {\n      handler.handlers.onUpdate?.(event);\n\n      if (handler.handlers.onChange && handler.handlers.changeEventCalculator) {\n        handler.handlers.onChange?.(\n          handler.handlers.changeEventCalculator?.(\n            event,\n            lastUpdateEvent[handler.handlers.handlerTag]\n          )\n        );\n\n        lastUpdateEvent[handler.handlers.handlerTag] = event;\n      }\n    }\n  } else {\n    const oldHandler = findOldGestureHandler(event.handlerTag);\n    if (oldHandler) {\n      const nativeEvent = { nativeEvent: event };\n      if (isStateChangeEvent(event)) {\n        oldHandler.onGestureStateChange(nativeEvent);\n      } else {\n        oldHandler.onGestureEvent(nativeEvent);\n      }\n      return;\n    }\n  }\n}\n\nexport function startListening() {\n  stopListening();\n\n  gestureHandlerEventSubscription = DeviceEventEmitter.addListener(\n    'onGestureHandlerEvent',\n    onGestureHandlerEvent\n  );\n\n  gestureHandlerStateChangeEventSubscription = DeviceEventEmitter.addListener(\n    'onGestureHandlerStateChange',\n    onGestureHandlerEvent\n  );\n}\n\nexport function stopListening() {\n  if (gestureHandlerEventSubscription) {\n    gestureHandlerEventSubscription.remove();\n    gestureHandlerEventSubscription = null;\n  }\n\n  if (gestureHandlerStateChangeEventSubscription) {\n    gestureHandlerStateChangeEventSubscription.remove();\n    gestureHandlerStateChangeEventSubscription = null;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}